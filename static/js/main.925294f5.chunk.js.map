{"version":3,"sources":["store/action-types.ts","store/chat-user-state/chatUserReducer.ts","firebase-config/index.ts","store/chat-user-state/chatUserActions.ts","store/users-state/usersReducer.ts","store/users-state/usersActions.ts","store/index.tsx","views/login-page/styles.ts","utils/validations.ts","components/alert-message/index.tsx","views/login-page/index.tsx","views/chat-page/components/top-bar/styles.ts","views/chat-page/components/top-bar/index.tsx","views/chat-page/components/drawer/components/users-list/styles.ts","views/chat-page/components/drawer/components/users-list/index.tsx","views/chat-page/components/drawer/styles.ts","views/chat-page/components/drawer/index.tsx","views/chat-page/components/input-field/styles.ts","views/chat-page/components/input-field/index.tsx","views/chat-page/components/button-list/index.tsx","views/chat-page/styles.ts","components/modal-wrapper/styles.ts","components/modal-wrapper/index.tsx","views/chat-page/index.tsx","views/profile-page/styles.ts","views/profile-page/index.tsx","App.tsx","index.tsx"],"names":["ChatUserReducer","state","action","type","TYPES","usersWithChats","payload","filter","user","uid","messages","msg","chatId","userChats","uChats","message","config","apiKey","process","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","auth","db","rtdb","storage","login","email","password","a","signInWithEmailAndPassword","logout","signOut","register","name","createUserWithEmailAndPassword","currentUser","updateProfile","displayName","collection","doc","set","photoURL","emailVerified","status","text","updateProfileAvatar","fullPath","ref","child","getDownloadURL","then","url","catch","err","updateUserProfile","file","storageRef","fileRef","put","metadata","getCurrentUser","getUsers","get","users","usersList","forEach","push","data","id","getChatUsers","currentUserId","dispatch","on","snapshot","key","getCurrentChatUser","userId","val","once","setCurrentChatUser","userWithChats","createdAt","Firebase","database","ServerValue","TIMESTAMP","setChatAsRead","chatUserId","chatRef","snap","update","read","getCurrentChat","senderId","receiverId","getUserChats","addNewMessageToChat","chat","chatKey","removeFromUsersWithChats","remove","deleteMessage","messageWriter","reference","deleteChat","chatUser","app","initializeApp","this","firestore","Promise","resolve","onAuthStateChanged","setChatUser","firebase","getInitialChatUser","resetChatMessages","getUsersWithChats","sendMessage","UsersReducer","chatUsers","getAllUsers","initialState","Store","React","createContext","rootReducer","reducers","reduce","acc","nextReducer","reduceReducers","StoreProvider","props","useReducer","Provider","value","children","makeStyles","theme","paper","marginTop","spacing","display","flexDirection","alignItems","avatar","margin","backgroundColor","palette","secondary","main","form","width","submit","validateEmail","error","test","validatePassword","isRequired","AlertMessage","Alert","severity","withRouter","useState","setMessage","signIn","setSignIn","classes","useStyles","handleSubmit","values","history","Container","component","maxWidth","CssBaseline","className","Avatar","Typography","variant","validateOnBlur","initialValues","confirm","onSubmit","setSubmitting","errors","touched","handleChange","handleBlur","isSubmitting","TextField","fullWidth","label","onChange","onBlur","validate","render","autoComplete","pass","validateConfirm","FormControlLabel","control","Checkbox","color","Button","disabled","Grid","container","item","xs","Link","href","onClick","toolbar","paddingRight","appBar","zIndex","drawer","transition","transitions","create","easing","sharp","duration","leavingScreen","appBarShift","marginLeft","enteringScreen","menuButton","marginRight","menuButtonHidden","title","flex","iconsWrapper","justifyContent","useContext","newMessages","setNewMessages","useEffect","length","newMsgs","handleLogOut","replace","AppBar","position","clsx","open","Toolbar","IconButton","edge","aria-label","handleDrawerOpen","Menu","handleDrawerClose","ChevronLeft","ChatUserActions","Person","fontSize","Badge","badgeContent","Notifications","e","preventDefault","active","grey","closed","paddingLeft","orange","small","height","UserItem","activeChat","index","ListItem","button","stopPropagation","some","timer","setTimeout","clearTimeout","Box","mr","alt","undefined","src","slice","ListItemText","primary","drawerPaper","whiteSpace","drawerPaperClose","overflowX","breakpoints","up","search","borderRadius","shape","marginBottom","fade","common","white","searchIcon","padding","pointerEvents","inputRoot","inputInput","App","setSearch","UsersActions","Drawer","Search","InputBase","placeholder","root","input","inputProps","searchWord","target","toLowerCase","Divider","List","includes","map","idx","u","chatInput","formControl","inputField","flexGrow","InputField","handleSendMessage","resetForm","FormControl","multiline","rowsMax","onKeyDown","onKeyUp","ButtonList","handleDelete","maxHeight","appBarSpacer","mixins","content","overflow","chatContainer","borderBottom","overflowY","messageGrid","cursor","receivedMessagePaper","float","sentMessagePaper","createStyles","background","top","left","transform","outline","ModalWrapper","openModal","handleClose","Modal","onClose","aria-labelledby","aria-describedby","ChatPage","modalOpen","setModalOpen","setOpen","setMessageWriter","messageSelected","setMessageSelected","handleDrawer","disableGutters","Paper","justify","layout","paddingTop","btnsWrapper","avatarWrapper","editIcon","right","fileInput","large","setName","setFile","imagePreview","setImagePreview","setUser","response","Fragment","noWrap","startIcon","ExitToApp","goBack","direction","accept","files","URL","createObjectURL","htmlFor","Edit","defaultValue","createMuiTheme","firebaseInitialized","setFirebaseInitialized","isInitialized","res","ThemeProvider","exact","path","LoginPage","ProfilePage","CircularProgress","ReactDOM","StrictMode","basename","window","location","pathname","document","getElementById"],"mappings":"yQAAe,EAEI,gBAFJ,EAGO,mBAHP,EAIW,uBAJX,EAOW,uBAPX,EASQ,oBATR,EAWU,sBAXV,EAYQ,oBAZR,EAaK,iBAbL,EAcK,iBAdL,EAgBW,uBC0CXA,EAvDS,SAACC,EAAOC,GAC5B,OAAQA,EAAOC,MACX,KAAKC,EACD,OAAO,2BACAH,GADP,IAEII,eAAe,CACXH,EAAOI,SADG,mBAEPL,EAAMI,eAAeE,QAAO,SAACC,GAAD,OAAUA,EAAKC,MAAQP,EAAOI,QAAQG,WAIjF,KAAKL,EACD,OAAO,2BACAH,GADP,IAEII,eAAgBJ,EAAMI,eAAeE,QAAO,SAACC,GAAD,OAAUA,EAAKC,MAAQP,EAAOI,aAGlF,KAAKF,EACD,OAAO,2BACAH,GADP,IAEIS,SAAS,GAAD,mBACDT,EAAMS,SAASH,QAAO,SAACI,GAAD,OAASA,EAAIC,SAAWV,EAAOI,QAAQM,WAD5D,CAEJV,EAAOI,YAInB,KAAKF,EACD,OAAO,2BACAH,GADP,IAEIY,UAAU,GAAD,mBACFZ,EAAMY,UAAUN,QAAO,SAACO,GAAD,OAAYA,EAAOL,MAAQP,EAAOI,QAAQG,QAD/D,CAELP,EAAOI,YAInB,KAAKF,EACD,OAAO,2BAAKH,GAAZ,IAAmBS,SAAU,KAEjC,KAAKN,EACD,OAAO,2BACAH,GADP,IAEIS,SAAUT,EAAMS,SAASH,QAAO,SAACQ,GAAD,OAAaA,EAAQH,SAAWV,EAAOI,aAG/E,KAAKF,EACD,OAAO,2BACAH,GADP,IAEIS,SAAUT,EAAMI,eAAeI,MAAQP,EAAOI,QAAU,GAAKL,EAAMS,WAG3E,QACI,OAAOT,I,6ECxCbe,G,4BAAS,CACXC,OAAQC,0CACRC,WAAYD,sCACZE,YAAaF,6CACbG,UAAWH,sBACXI,cAAeJ,kCACfK,kBAAmBL,eACnBM,MAAON,8CA+RI,M,WArRX,aAAe,IAAD,gCALdO,UAKc,OAJdC,QAIc,OAHdC,UAGc,OAFdC,aAEc,OAQPC,MARO,uCAQC,WAAOC,EAAeC,GAAtB,SAAAC,EAAA,sEACE,EAAKP,KAAKQ,2BAA2BH,EAAOC,GAD9C,mFARD,6DAYPG,OAAS,WACZ,EAAKT,KAAKU,WAbA,KAgBPC,SAhBO,uCAgBI,WACdC,EACAP,EACAC,GAHc,mBAAAC,EAAA,+EAMa,EAAKP,KAAKa,+BAA+BR,EAAOC,GAN7D,uBAMFvB,EANE,EAMFA,KANE,mBAOJ,EAAKiB,KAAKc,mBAPN,aAOJ,EAAuBC,cAAc,CACvCC,YAAaJ,IARP,uBAUG,EAAKX,GAAGgB,WAAW,SAASC,IAA5B,iBAAmCnC,QAAnC,IAAmCA,OAAnC,EAAmCA,EAAMC,MAAOmC,IAAI,CAC7DH,YAAW,OAAEjC,QAAF,IAAEA,OAAF,EAAEA,EAAMiC,YACnBX,MAAK,OAAEtB,QAAF,IAAEA,OAAF,EAAEA,EAAMsB,MACbe,SAAQ,OAAErC,QAAF,IAAEA,OAAF,EAAEA,EAAMqC,SAChBC,cAAa,OAAEtC,QAAF,IAAEA,OAAF,EAAEA,EAAMsC,cACrBrC,IAAG,OAAED,QAAF,IAAEA,OAAF,EAAEA,EAAMC,MAfL,mGAkBH,CAAEsC,OAAQ,QAASC,KAAK,EAAD,KAlBpB,0DAhBJ,+DA4CNC,oBAAsB,SAACC,GACR,EAAKtB,QAAQuB,MAE3BC,MAAMF,GACNG,iBACAC,MAAK,SAACC,GAAD,uBAAS,EAAK9B,KAAKc,mBAAnB,aAAS,EAAuBC,cAAc,CAAEK,SAAUU,OAC/DC,OAAM,SAACC,GACJ,MAAMA,MAnDJ,KAuDPC,kBAvDO,uCAuDa,WACvBC,EACAtB,GAFuB,uBAAAL,EAAA,kEAKfK,IACA,YAAKZ,KAAKc,mBAAV,SAAuBC,cAAc,CAAEC,YAAaJ,MAEpDsB,EARe,wBASTC,EAAa,EAAKhC,QAAQuB,MAC1BU,EAAUD,EAAWR,MAAX,wBAA2BO,QAA3B,IAA2BA,OAA3B,EAA2BA,EAAMtB,OAVlC,SAWYwB,EAAQC,IAAIH,GAXxB,gBAWPI,EAXO,EAWPA,SACR,EAAKd,oBAAoBc,EAASb,UAZnB,iCAcZ,CAAEH,OAAQ,UAAWC,KAAM,kCAdf,2DAgBZ,CAAED,OAAQ,QAASC,KAAK,EAAD,KAhBX,0DAvDb,6DA2EPgB,eAAiB,WACpB,IAAMxD,EAAO,EAAKiB,KAAKc,YACvB,OAAY,MAAR/B,EACO,CACHiC,YAAajC,EAAKiC,YAClBX,MAAOtB,EAAKsB,MACZe,SAAUrC,EAAKqC,SACfC,cAAetC,EAAKsC,cACpBrC,IAAKD,EAAKC,KAGX,MAtFG,KAyFPwD,SAzFO,sBAyFI,8BAAAjC,EAAA,sEACM,EAAKN,GAAGgB,WAAW,SAASwB,MADlC,cACRC,EADQ,OAERC,EAAqB,GAC3BD,EAAME,SAAQ,SAAC7D,GACX4D,EAAUE,KAAV,2BAAoB9D,EAAK+D,QAAzB,IAAiC9D,IAAKD,EAAKgE,SAJjC,kBAMPJ,GANO,2CAzFJ,KAkGPK,aAAe,SAACC,EAAuBC,GAC1C,IACI,EAAKhD,KAAKwB,IAAV,sBAA6BuB,IAAiBE,GAAG,eAAe,SAACC,GAC7DF,EAAS,CACLxE,KAAMC,EACNE,QAASuE,EAASC,SAG5B,MAAOrB,GACL,MAAMA,IA3GA,KA+GPsB,mBAAqB,SAACC,EAAgBL,GACzC,EAAKhD,KAAKwB,IAAV,6BAAoC6B,IAAUJ,GAAG,iBAAiB,SAACC,GAC/DF,EAAS,CACLxE,KAAMC,EACNE,QAAQ,2BAAMuE,EAASI,OAAhB,IAAuBxE,IAAKoE,EAASC,WAGpD,EAAKnD,KAAKwB,IAAV,6BAAoC6B,IAAUE,KAAK,SAAS,SAACL,GACzDA,EAASR,SAAQ,SAAC7D,GACdmE,EAAS,CACLxE,KAAMC,EACNE,QAAQ,2BAAME,EAAKyE,OAAZ,IAAmBxE,IAAKD,EAAKsE,eA1HtC,KAgIPK,mBAhIO,uCAgIc,WAAO5C,EAAoB6C,GAA3B,SAAApD,EAAA,+DAEpB,EAAKL,KAAKwB,IAAV,6BAAoCZ,EAAY9B,IAAhD,YAAuD2E,EAAc3E,MAAOmC,IAA5E,2BACOwC,GADP,IAEIC,UAAWC,IAASC,SAASC,YAAYC,aAJzB,kHAhId,6DA2IPC,cA3IO,uCA2IS,WAAOhB,EAAuBiB,GAA9B,eAAA3D,EAAA,+EAEO,EAAKL,KAAKwB,IAAV,sBAA6BuB,EAA7B,YAA8CiB,IAFrD,cAETC,EAFS,gBAGTA,EAAQV,KAAK,SAAS,SAACL,GACzBA,EAASR,SAAQ,SAACwB,GACd,EAAKlE,KACAwB,IADL,sBACwBuB,EADxB,YACyCiB,IACpCvC,MAFL,UAEcyC,EAAKf,MACdgB,OAAO,CAAEC,MAAM,UARb,2HA3IT,6DA2JPC,eA3JO,uCA2JU,WACpBC,EACAC,EACAvB,GAHoB,SAAA3C,EAAA,+EAMV,EAAKL,KACNwB,IADC,sBACkB8C,EADlB,YAC8BC,IAC/BtB,GAAG,eAAe,SAACC,GAChBF,EAAS,CACLxE,KAAMC,EACNE,QAAQ,2BAAMuE,EAASI,OAAhB,IAAuBrE,OAAQiE,EAASC,WAX3C,uBAcV,EAAKnD,KACNwB,IADC,sBACkB8C,EADlB,YAC8BC,IAC/BhB,KAAK,SAAS,SAACL,GACZF,EAAS,CACLxE,KAAMC,EACNE,QAAQ,2BAAMuE,EAASI,OAAhB,IAAuBrE,OAAQiE,EAASC,WAnB3C,2HA3JV,+DAsLPqB,aAtLO,uCAsLQ,WAAOzB,EAAuBC,GAA9B,SAAA3C,EAAA,+EAER,EAAKL,KAAKwB,IAAV,sBAA6BuB,IAAiBE,GAAG,eAAe,SAACC,GACnEA,EAASR,SAAQ,SAAC1D,GACdgE,EAAS,CACLxE,KAAMC,EACNE,QAAQ,2BAAMK,EAAIsE,OAAX,IAAkBzE,KAAMqE,EAASC,cANtC,uBAUR,EAAKnD,KAAKwB,IAAV,sBAA6BuB,IAAiBE,GAAG,iBAAiB,SAACC,GACrEA,EAASR,SAAQ,SAAC1D,GACdgE,EAAS,CACLxE,KAAMC,EACNE,QAAQ,2BAAMK,EAAIsE,OAAX,IAAkBzE,KAAMqE,EAASC,cAdtC,8GAtLR,6DA2MPsB,oBAAsB,SAACC,GAC1B,IACI,IAAMC,EAAU,EAAK3E,KAAKwB,IAAV,sBAA6BkD,EAAKJ,SAAlC,YAA8CI,EAAKH,WAAnD,MAAkE5B,OAC7EQ,IACDwB,IACA,EAAK3E,KACAwB,IADL,sBACwBkD,EAAKJ,SAD7B,YACyCI,EAAKH,aACzC9C,MAAMkD,GACN1D,IAHL,2BAGcyD,GAHd,IAGoB5F,IAAK6F,EAASP,MAAM,EAAMvF,KAAM6F,EAAKH,cACzD,EAAKvE,KACAwB,IADL,sBACwBkD,EAAKH,WAD7B,YAC2CG,EAAKJ,WAC3C7C,MAAMkD,GACN1D,IAHL,2BAGcyD,GAHd,IAGoB5F,IAAK6F,EAAS9F,KAAM6F,EAAKJ,aAEnD,MAAOxC,GACL,MAAMA,IA1NA,KA8NP8C,yBA9NO,uCA8NoB,WAC9B7B,EACAiB,EACAhB,GAH8B,SAAA3C,EAAA,+EAMA,EAAKL,KAAKwB,IAAV,4BACDuB,EADC,YACgBiB,IAPhB,cASda,SACZ7B,EAAS,CACLxE,KAAMC,EACNE,QAASqF,IAZa,oHA9NpB,+DAiPPc,cAjPO,uCAiPS,WACnBJ,EACAK,GAFmB,eAAA1E,EAAA,6DAIf2E,EAJe,sBAIYN,EAAKJ,SAJjB,YAI6BI,EAAKH,WAJlC,YAIgDG,EAAKzF,QAClD,aAAlB8F,IACAC,EAAS,sBAAkBN,EAAKH,WAAvB,YAAqCG,EAAKJ,SAA1C,YAAsDI,EAAKzF,SANrD,kBASU,EAAKe,KAAKwB,IAAIwD,GATxB,qBAUJH,SAVI,kBAWRH,EAAKzF,QAXG,uGAjPT,6DAkQPgG,WAlQO,uCAkQM,WAChBrE,EACAsE,EACAlC,GAHgB,SAAA3C,EAAA,+EAMU,EAAKL,KAAKwB,IAAV,sBAA6BZ,EAAY9B,IAAzC,YAAgDoG,EAASpG,MANnE,cAOJ+F,SACR7B,EAAS,CACLxE,KAAMC,EACNE,QAASuG,EAASpG,MAEtB,EAAK8F,yBAAyBhE,EAAY9B,IAAKoG,EAASpG,IAAKkE,GAZjD,oHAlQN,0DACVmC,IAAIC,cAAc/F,GAClBgG,KAAKvF,KAAOqF,IAAIrF,OAChBuF,KAAKtF,GAAKoF,IAAIG,YACdD,KAAKrF,KAAOmF,IAAIvB,WAChByB,KAAKpF,QAAUkF,IAAIlF,U,4DAiCe,IAAD,OACjC,OAAO,IAAIsF,SAAQ,SAACC,GAChB,EAAK1F,KAAK2F,mBAAmBD,U,MCjEnCE,EAAW,uCAAG,WAAO9E,EAAoB6C,GAA3B,SAAApD,EAAA,+EAChBsF,EAASnC,mBAAmB5C,EAAa6C,IADzB,2CAAH,wDAGXM,EAAa,uCAAG,WAAOhB,EAAuBiB,GAA9B,SAAA3D,EAAA,sDAClBsF,EAAS5B,cAAchB,EAAeiB,GADpB,2CAAH,wDAWb4B,EAAkB,uCAAG,WAAOhF,EAAoBoC,GAA3B,SAAA3C,EAAA,+EACvBsF,EAASvC,mBAAmBxC,EAAY9B,IAAKkE,IADtB,2CAAH,wDA6CT,GACX0C,cACA3B,gBACA8B,kBAvDsB,SAAC7C,GACvBA,EAAS,CACLxE,KAAMC,EACNE,QAAS,QAqDb0F,eA9CgB,uCAAG,WACnBtB,EACAiB,EACAhB,GAHmB,SAAA3C,EAAA,sDAKnBsF,EAAStB,eAAetB,EAAeiB,EAAYhB,GALhC,2CAAH,0DA+ChB8C,kBAvCmB,uCAAG,WACtB/C,EACAC,GAFsB,SAAA3C,EAAA,sDAItBsF,EAASnB,aAAazB,EAAeC,GAJf,2CAAH,wDAwCnB+C,YAjCa,uCAAG,WAAOrB,GAAP,SAAArE,EAAA,sDAChBsF,EAASlB,oBAAoBC,GADb,2CAAH,sDAkCbkB,qBACAhB,yBA/B0B,uCAAG,WAC7B7B,EACAiB,EACAhB,GAH6B,SAAA3C,EAAA,+EAIbsF,EAASf,yBAAyB7B,EAAeiB,EAAYhB,IAJhD,2CAAH,0DAgC1B8B,cA1Be,uCAAG,WAClBJ,EACAK,EACA/B,GAHkB,SAAA3C,EAAA,kEAKlB2C,EALkB,KAMRvE,EANQ,SAOCkH,EAASb,cAAcJ,EAAMK,GAP9B,yBAMdvG,KANc,KAOdG,QAPc,gEAAH,0DA2BfsG,WAhBY,uCAAG,WACfrE,EACAsE,EACAlC,GAHe,SAAA3C,EAAA,+EAICsF,EAASV,WAAWrE,EAAasE,EAAUlC,IAJ5C,2CAAH,2DC3CDgD,EAbM,SAAC1H,EAAOC,GACzB,OAAQA,EAAOC,MACX,KAAKC,EACD,OAAO,2BAAKH,GAAZ,IAAmBkE,MAAOjE,EAAOI,UACrC,KAAKF,EACD,OAAO,2BAAKH,GAAZ,IAAmBsC,YAAarC,EAAOI,UAC3C,KAAKF,EACD,OAAO,2BAAKH,GAAZ,IAAmB2H,UAAU,GAAD,mBAAM3H,EAAM2H,WAAZ,CAAuB1H,EAAOI,YAC9D,QACI,OAAOL,ICOJ,GAAE4H,YAfA,uCAAG,WAAOlD,GAAP,SAAA3C,EAAA,kEAChB2C,EADgB,KAENvE,EAFM,SAGGkH,EAASrD,WAHZ,gCAEZ9D,KAFY,KAGZG,QAHY,mFAAH,sDAea0D,eATV,uCAAG,WAAOW,GAAP,SAAA3C,EAAA,kEACnB2C,EADmB,KAETvE,EAFS,SAGAkH,EAAStD,iBAHT,gCAEf7D,KAFe,KAGfG,QAHe,mFAAH,sDAS0BmE,aAHzB,SAACC,EAAuBC,GAAxB,OACjB2C,EAAS7C,aAAaC,EAAeC,KCZnCmD,EAAoB,CACtB3D,MAAO,GACP9D,eAAgB,GAChBkC,YAAa,KACb7B,SAAU,GACVkH,UAAW,GACX/G,UAAW,IAGFkH,EAAQC,IAAMC,cAAmBH,GAYxCI,EAHiB,sCAAIC,EAAJ,yBAAIA,EAAJ,uBAA6B,SAAClI,EAAYC,GAAb,OAChDiI,EAASC,QAAO,SAACC,EAAKC,GAAN,OAAsBA,EAAYD,EAAKnI,KAASD,IAEhDsI,CAAeZ,EAAc3H,GAa1C,SAASwI,EAAcC,GAA4B,IAAD,EAC3BT,IAAMU,WAAWR,EAAaJ,GADH,mBAC9C7H,EAD8C,KACvC0E,EADuC,KAGrD,OAAO,kBAACoD,EAAMY,SAAP,CAAgBC,MAAO,CAAE3I,QAAO0E,aAAa8D,EAAMI,U,6ICxC/CC,iBAAW,SAACC,GAAD,MAAY,CAClCC,MAAO,CACHC,UAAWF,EAAMG,QAAQ,GACzBC,QAAS,OACTC,cAAe,SACfC,WAAY,UAEhBC,OAAQ,CACJC,OAAQR,EAAMG,QAAQ,GACtBM,gBAAiBT,EAAMU,QAAQC,UAAUC,MAE7CC,KAAM,CACFC,MAAO,OACPZ,UAAWF,EAAMG,QAAQ,IAE7BY,OAAQ,CACJP,OAAQR,EAAMG,QAAQ,EAAG,EAAG,QClBpC,SAASa,GAAcnB,GACnB,IAAIoB,EAMJ,OALKpB,EAEO,4CAA4CqB,KAAKrB,KACzDoB,EAAQ,yBAFRA,EAAQ,WAILA,EAGX,SAASE,GAAiBtB,GACtB,IAAIoB,EAWJ,OAVKpB,EAEO,4BAA4BqB,KAAKrB,KACzCoB,EAAK,qNAFLA,EAAQ,WASLA,EAaX,SAASG,GAAWvB,GAChB,IAAIoB,EAIJ,OAHKpB,IACDoB,EAAQ,YAELA,E,cC1BII,GAV0B,SAAC,GAAgC,IAA9BrH,EAA6B,EAA7BA,OAAQC,EAAqB,EAArBA,KAChD,OACI,oCACI,kBAACqH,GAAA,EAAD,CAAOC,SAAUvH,GACb,2BAAIC,MCsMLuH,gBA/K0B,SAAC9B,GAAwB,IAAD,EAC/B+B,qBAD+B,mBACtDzJ,EADsD,KAC7C0J,EAD6C,OAEjCD,oBAAS,GAFwB,mBAEtDE,EAFsD,KAE9CC,EAF8C,KAGvDC,EAAUC,KAEVC,EAAY,uCAAG,WAAOC,EAAiBL,GAAxB,SAAA1I,EAAA,mEAET0I,EAFS,gCAGHpD,EAASzF,MAAMkJ,EAAOjJ,MAAOiJ,EAAOhJ,UAHjC,OAIT0G,EAAMuC,QAAQ1G,KAAK,SAJV,uCAMHgD,EAASlF,SAAS2I,EAAO1I,KAAM0I,EAAOjJ,MAAOiJ,EAAOhJ,UANjD,OAOT0G,EAAMuC,QAAQ1G,KAAK,SAPV,0DAUbmG,EAAW,CAAE1H,OAAQ,QAASC,KAAM,KAAMjC,UAV7B,0DAAH,wDAclB,OACI,kBAACkK,EAAA,EAAD,CAAWC,UAAU,OAAOC,SAAS,MACjC,kBAACC,EAAA,EAAD,MACA,yBAAKC,UAAWT,EAAQ5B,OACpB,kBAACsC,EAAA,EAAD,CAAQD,UAAWT,EAAQtB,QACvB,kBAAC,KAAD,OAEJ,kBAACiC,EAAA,EAAD,CAAYL,UAAU,KAAKM,QAAQ,MAC9Bd,EAAS,UAAY,WAEzB3J,GAAW,kBAAC,GAAD,CAAcgC,OAAQhC,EAAQgC,OAAQC,KAAMjC,EAAQiC,OAChE,kBAAC,IAAD,CACIyI,gBAAc,EACdC,cAAe,CAAErJ,KAAM,GAAIP,MAAO,GAAIC,SAAU,GAAI4J,QAAS,IAC7DC,SAAU,SAACb,EAAD,GAAiE,IAA7Cc,EAA4C,EAA5CA,cAC1Bf,EAAaC,EAAQL,GACrBmB,GAAc,MAGjB,gBACGd,EADH,EACGA,OACAe,EAFH,EAEGA,OACAC,EAHH,EAGGA,QACAC,EAJH,EAIGA,aACAC,EALH,EAKGA,WACAnB,EANH,EAMGA,aACAoB,EAPH,EAOGA,aAPH,OASG,0BAAMN,SAAUd,IACVJ,GACE,kBAACyB,EAAA,EAAD,CACIX,QAAQ,WACRjC,OAAO,SACP6C,WAAS,EACT/J,KAAK,OACLgK,MAAM,OACN7H,GAAG,OACH8H,SAAUN,EACVO,OAAQN,EACRrD,MAAOmC,EAAO1I,OAGtB,kBAAC,IAAD,CACIA,KAAK,QACLuG,MAAOmC,EAAOjJ,MACd0K,SAAUzC,GACV0C,OAAQ,kBACJ,kBAACN,EAAA,EAAD,CACIX,QAAQ,WACRjC,OAAO,SACP6C,WAAS,EACT5H,GAAG,QACH6H,MAAM,gBACNlM,KAAK,QACLuM,aAAa,QACbJ,SAAUN,EACVO,OAAQN,EACR5J,KAAK,aAKhByJ,EAAOhK,OAASiK,EAAQjK,OACrB,kBAAC,GAAD,CAAciB,OAAO,QAAQC,KAAM8I,EAAOhK,QAE9C,kBAAC,IAAD,CACIO,KAAK,WACLuG,MAAOmC,EAAOhJ,SACdyK,SAAUtC,GACVuC,OAAQ,kBACJ,kBAACN,EAAA,EAAD,CACI3H,GAAG,WACHnC,KAAK,WACLmJ,QAAQ,WACRjC,OAAO,SACP6C,WAAS,EACTM,aAAa,mBACbvM,KAAK,WACLkM,MAAM,WACNC,SAAUN,EACVO,OAAQN,OAInBH,EAAO/J,UAAYgK,EAAQhK,UACxB,kBAAC,GAAD,CAAcgB,OAAO,QAAQC,KAAM8I,EAAO/J,YAE5C2I,GACE,oCACI,kBAAC,IAAD,CACIrI,KAAK,UACLuG,MAAOmC,EAAOY,QACda,SAAU,SAAC5D,GAAD,OFrHlD,SAAyB+D,EAAM/D,GAC3B,IAAIoB,EAMJ,OALKpB,EAEM+D,GAAQ/D,GAASA,IAAU+D,IAClC3C,EAAQ,sDAFRA,EAAQ,WAILA,EE+GiC4C,CAAgB7B,EAAOhJ,SAAU6G,IAErC6D,OAAQ,kBACJ,kBAACN,EAAA,EAAD,CACIX,QAAQ,WACRjC,OAAO,SACP6C,WAAS,EACT/J,KAAK,UACLgK,MAAM,mBACN7H,GAAG,UACHrE,KAAK,WACLmM,SAAUN,EACVO,OAAQN,OAInBF,EAAQJ,SAAWG,EAAOH,SACvB,kBAAC,GAAD,CAAc5I,OAAO,QAAQC,KAAM8I,EAAOH,WAIrDjB,GACG,kBAACmC,EAAA,EAAD,CACIC,QAAS,kBAACC,EAAA,EAAD,CAAUnE,MAAM,WAAWoE,MAAM,YAC1CX,MAAM,gBAGd,kBAACY,EAAA,EAAD,CACI9M,KAAK,SACLiM,WAAS,EACTZ,QAAQ,YACRwB,MAAM,UACN3B,UAAWT,EAAQd,OACnBoD,SAAUhB,GAETxB,EAAS,UAAY,WAE1B,kBAACyC,EAAA,EAAD,CAAMC,WAAS,GACX,kBAACD,EAAA,EAAD,CAAME,MAAI,EAACC,IAAE,GACT,kBAACC,GAAA,EAAD,CAAMC,KAAK,IAAIhC,QAAQ,SAAvB,qBAIJ,kBAAC2B,EAAA,EAAD,CAAME,MAAI,GACN,kBAACE,GAAA,EAAD,CACIC,KAAK,IACLhC,QAAQ,QACRiC,QAAS,kBAAM9C,GAAWD,KAEzBA,EACK,iCACA,+C,4GC9L/B5B,iBAAW,SAACC,GAAD,MAAY,CAClC2E,QAAS,CACLC,aAAc,IAElBC,OAAQ,CACJC,OAAQ9E,EAAM8E,OAAOC,OAAS,EAC9BC,WAAYhF,EAAMiF,YAAYC,OAAO,CAAC,QAAS,UAAW,CACtDC,OAAQnF,EAAMiF,YAAYE,OAAOC,MACjCC,SAAUrF,EAAMiF,YAAYI,SAASC,iBAG7CC,YAAa,CACTC,WAdY,IAeZ1E,MAAM,eAAD,OAfO,IAeP,OACLkE,WAAYhF,EAAMiF,YAAYC,OAAO,CAAC,QAAS,UAAW,CACtDC,OAAQnF,EAAMiF,YAAYE,OAAOC,MACjCC,SAAUrF,EAAMiF,YAAYI,SAASI,kBAG7CC,WAAY,CACRC,YAAa,IAEjBC,iBAAkB,CACdxF,QAAS,QAEbyF,MAAO,CACHC,KAAM,GAEVC,aAAc,CACVD,KAAM,EACN1F,QAAS,OACTE,WAAY,SACZ0F,eAAgB,gBC+DTxE,gBA5EwB,SAAC9B,GAAyB,IAAD,UACtDmC,EAAUC,KAD4C,EAEhC7C,IAAMgH,WAAWjH,GAArC9H,EAFoD,EAEpDA,MAAO0E,EAF6C,EAE7CA,SAF6C,EAGtB6F,mBAAiB,GAHK,mBAGrDyE,EAHqD,KAGxCC,EAHwC,KAItDxK,EAAa,UAAGzE,EAAMsC,mBAAT,aAAG,EAAmB9B,IACzC0O,qBAAU,WACN,GAAIlP,EAAMY,UAAUuO,OAAS,EAAG,CAC5B,IAAMC,EAAUpP,EAAMY,UAAUN,QAAO,SAAC8F,GAAD,OAAWA,EAAKN,QAAMqJ,OAC7DF,EAAeG,MAEpB,CAACpP,EAAMY,UAAW6D,IAErB,IAAM4K,EAAY,uCAAG,sBAAAtN,EAAA,sEACXsF,EAASpF,SADE,OAEjBuG,EAAMuC,QAAQuE,QAAQ,KAFL,2CAAH,qDAUlB,OACI,kBAACC,GAAA,EAAD,CACIC,SAAS,WACTpE,UAAWqE,aAAK9E,EAAQgD,OAAQnF,EAAMkH,MAAQ/E,EAAQ0D,cAEtD,kBAACsB,GAAA,EAAD,CAASvE,UAAWT,EAAQ8C,SACxB,kBAACmC,GAAA,EAAD,CACIC,KAAK,QACL9C,MAAM,UACN+C,aAAW,cACXtC,QAAShF,EAAMuH,iBACf3E,UAAWqE,aAAK9E,EAAQ6D,WAAYhG,EAAMkH,MAAQ/E,EAAQ+D,mBAE1D,kBAACsB,GAAA,EAAD,OAEJ,kBAACJ,GAAA,EAAD,CACIpC,QAAShF,EAAMyH,kBACf7E,UAAWqE,aAAK9E,EAAQ6D,YAAahG,EAAMkH,MAAQ/E,EAAQ+D,mBAE3D,kBAACwB,GAAA,EAAD,OAEJ,kBAAC5E,EAAA,EAAD,CAAYL,UAAU,OAAOM,QAAQ,KAAKwB,MAAM,UAAU3B,UAAWT,EAAQgE,QACxE,UAAA3O,EAAMI,eAAe,UAArB,eAAyBoC,eAAzB,UAAwCxC,EAAMI,eAAe,UAA7D,aAAwC,EAAyByB,QAGtE,yBAAKuJ,UAAWT,EAAQkE,cACpB,kBAACvD,EAAA,EAAD,CAAYL,UAAU,QAAtB,iBACI,UAAAjL,EAAMsC,mBAAN,eAAmBE,eAAnB,UAAkCxC,EAAMsC,mBAAxC,aAAkC,EAAmBT,OADzD,MAGA,kBAAC+N,GAAA,EAAD,CAAY7C,MAAM,UAAUS,QAlClB,WACtB2C,EAAgB5I,kBAAkB7C,GAClC8D,EAAMuC,QAAQ1G,KAAK,cAiCH,kBAAC+L,GAAA,EAAD,CAAYC,SAAS,WAExBrB,EAAc,GACX,kBAACY,GAAA,EAAD,CAAY7C,MAAM,WACd,kBAACuD,GAAA,EAAD,CAAOC,aAAcvB,EAAajC,MAAM,aACpC,kBAACyD,GAAA,EAAD,CAAmBH,SAAS,YAIxC,kBAACT,GAAA,EAAD,CACI7C,MAAM,UACNS,QAAS,SAACiD,GACNA,EAAEC,iBACFrB,MAGJ,kBAAC,KAAD,CAAUgB,SAAS,iB,qGCzF5BxH,iBAAW,SAACC,GAAD,MAAY,CAClC6H,OAAQ,CACJpH,gBAAiBT,EAAMU,QAAQoH,KAAK,MAExCC,OAAQ,CACJC,YAAa,gBAEjBC,OAAQ,CACJxH,gBAAiB,UAErByH,MAAO,CACHpH,MAAOd,EAAMG,QAAQ,GACrBgI,OAAQnI,EAAMG,QAAQ,QCsFfiI,GApF4B,SAAC,GAMR,IAAD,EAL/B3Q,EAK+B,EAL/BA,KACA+B,EAI+B,EAJ/BA,YACA6O,EAG+B,EAH/BA,WACAC,EAE+B,EAF/BA,MACA1B,EAC+B,EAD/BA,KAEM/E,EAAUC,KADe,EAEHmE,qBAAWjH,GAA/B9H,EAFuB,EAEvBA,MAAO0E,EAFgB,EAEhBA,SAFgB,EAGO6F,qBAHP,mBAGxByE,EAHwB,KAGXC,EAHW,KAK/BC,qBAAU,WACN,GAAI3O,EAAM,CACN,IACM6O,EADmBpP,EAAMY,UAAUN,QAAO,SAAC8F,GAAD,OAAUA,EAAK7F,OAASA,EAAKC,OAC5CF,QAAO,SAACI,GAAD,OAAsB,IAAbA,EAAIoF,QAAgBqJ,OACrEF,EAAeG,MAEpB,CAACpP,EAAMY,UAAW0B,EAAY9B,IAAKD,IA6BtC,OACI,kBAAC8Q,GAAA,EAAD,CACIxM,IAAKtE,EAAKC,IACV8Q,QAAM,EACN9D,QA/BoE,SAACiD,GACzEA,EAAEc,kBAEEvR,EAAMI,eAAe+O,OAAS,IAC7BnP,EAAM2H,UAAU6J,MAAK,SAACjR,GAAD,OAAUA,IAASP,EAAMI,eAAe,GAAGI,QAEjE2P,EAAgB7J,yBACZhE,EAAY9B,IACZR,EAAMI,eAAe,GAAGI,IACxBkE,GAGRyL,EAAgB5I,kBAAkB7C,GAClCyL,EAAgB1K,cAAcnD,EAAY9B,IAAKD,EAAKC,KACpD,IAAMiR,EAAQC,YAAW,WACrBvB,EAAgBpK,eAAezD,EAAY9B,IAAKD,EAAKC,IAAKkE,GAC1DyL,EAAgB/I,YAAY9E,EAAa/B,GACzCoR,aAAaF,KACd,MAcCrG,UAAWqE,aAAe,IAAV2B,EAAczG,EAAQgG,OAAS,GAAKjB,EAAwB,GAAjB/E,EAAQkG,SAEnE,kBAACe,GAAA,EAAD,CAAKC,GAAI,IACA,OAAJtR,QAAI,IAAJA,OAAA,EAAAA,EAAMqC,UACH,kBAACgN,GAAA,EAAD,CAAY7C,MAAM,WACd,kBAACuD,GAAA,EAAD,CAAOC,aAAcvB,EAAajC,MAAM,aACpC,kBAAC1B,EAAA,EAAD,CACIyG,KAAS,OAAJvR,QAAI,IAAJA,OAAA,EAAAA,EAAMiC,eAAN,OAAqBjC,QAArB,IAAqBA,OAArB,EAAqBA,EAAMsB,aAASkQ,EACzCC,KAAS,OAAJzR,QAAI,IAAJA,OAAA,EAAAA,EAAMqC,gBAAYmP,EACvB3G,UAAWT,EAAQqG,UAK/B,kBAACpB,GAAA,EAAD,CAAY7C,MAAM,WACd,kBAACuD,GAAA,EAAD,CAAOC,aAAcvB,EAAajC,MAAM,aACpC,kBAAC1B,EAAA,EAAD,CAAQD,UAAWqE,aAAK9E,EAAQoG,OAAQpG,EAAQqG,QAAhD,OACKzQ,QADL,IACKA,GADL,UACKA,EAAMiC,mBADX,aACK,EAAmByP,MAAM,EAAG,OAMhDvC,GACG,oCACI,kBAACwC,GAAA,EAAD,CAAcC,QAAS5R,EAAKiC,aAAejC,EAAKsB,QAC/CsP,GAAc,kBAAC,KAAD,CAAY3D,QArCiC,SAACiD,GACzEA,EAAEc,kBACFpB,EAAgBxJ,WAAWrE,EAAa/B,EAAMmE,GAC9CyL,EAAgB5I,kBAAkB7C,S,kBCvD3BmE,iBAAW,SAACC,GAAD,MAAY,CAClCsJ,YAAa,CACT5C,SAAU,WACV6C,WAAY,SACZzI,MANY,IAOZkE,WAAYhF,EAAMiF,YAAYC,OAAO,QAAS,CAC1CC,OAAQnF,EAAMiF,YAAYE,OAAOC,MACjCC,SAAUrF,EAAMiF,YAAYI,SAASI,kBAG7C+D,iBAAiB,cACb9C,SAAU,WACV+C,UAAW,SACXzE,WAAYhF,EAAMiF,YAAYC,OAAO,QAAS,CAC1CC,OAAQnF,EAAMiF,YAAYE,OAAOC,MACjCC,SAAUrF,EAAMiF,YAAYI,SAASC,gBAEzCxE,MAAOd,EAAMG,QAAQ,IACpBH,EAAM0J,YAAYC,GAAG,MAAQ,CAC1B7I,MAAOd,EAAMG,QAAQ,KAG7ByJ,OAAO,cACHlD,SAAU,WACVmD,aAAc7J,EAAM8J,MAAMD,aAC1BlE,YAAa3F,EAAMG,QAAQ,GAC3BD,UAAWF,EAAMG,QAAQ,GACzB4J,aAAc/J,EAAMG,QAAQ,GAC5BM,gBAAiBuJ,aAAKhK,EAAMU,QAAQuJ,OAAOC,MAAO,KAClD,UAAW,CACPzJ,gBAAiBuJ,aAAKhK,EAAMU,QAAQuJ,OAAOC,MAAO,MAEtDpJ,MAAO,QACNd,EAAM0J,YAAYC,GAAG,MAAQ,CAC1BnE,WAAYxF,EAAMG,QAAQ,GAC1BW,MAAO,SAGfqJ,WAAY,CACRC,QAASpK,EAAMG,QAAQ,EAAG,GAC1BgI,OAAQ,OACRzB,SAAU,WACV2D,cAAe,OACfjK,QAAS,OACTE,WAAY,SACZ0F,eAAgB,UAEpBsE,UAAW,CACPrG,MAAO,WAEXsG,WAAW,cACPH,QAASpK,EAAMG,QAAQ,EAAG,EAAG,EAAG,GAEhC6H,YAAY,cAAD,OAAgBhI,EAAMG,QAAQ,GAA9B,OACX6E,WAAYhF,EAAMiF,YAAYC,OAAO,SACrCpE,MAAO,QACNd,EAAM0J,YAAYC,GAAG,MAAQ,CAC1B7I,MAAO,SAGfzF,UAAW,CACP+O,QAAS,OCnDF,SAASI,GAAT,GAAsC,IAAvB5D,EAAsB,EAAtBA,KACpB/E,EAAUC,KADgC,EAEpB7C,IAAMgH,WAAWjH,GAArC9H,EAFwC,EAExCA,MAAO0E,EAFiC,EAEjCA,SAFiC,EAGpB6F,mBAAiB,IAHG,mBAGzCmI,EAHyC,KAGjCa,EAHiC,KAKhDrE,qBAAU,WACNsE,EAAa5L,YAAYlD,KAC1B,CAACA,IASJ,OACI,kBAAC+O,GAAA,EAAD,CACIlI,QAAQ,YACRZ,QAAS,CACL5B,MAAO0G,aAAK9E,EAAQyH,aAAc1C,GAAQ/E,EAAQ2H,mBAEtD5C,KAAMA,GAEN,yBAAKtE,UAAWT,EAAQ+H,QACpB,yBAAKtH,UAAWT,EAAQsI,YACpB,kBAACS,GAAA,EAAD,OAEJ,kBAACC,GAAA,EAAD,CACIC,YAAY,eACZjJ,QAAS,CACLkJ,KAAMlJ,EAAQyI,UACdU,MAAOnJ,EAAQ0I,YAEnBU,WAAY,CAAE,aAAc,UAC5B1H,SA1BW,SACvBoE,GAEA,IAAMuD,EAAavD,EAAEwD,OAAOtL,MAAMuL,cAClCX,EAAUS,OAyBN,kBAACG,GAAA,EAAD,MACCnU,EAAMkE,OAASlE,EAAMsC,aAClB,oCACKtC,EAAMI,eAAe+O,OAAS,GAC3B,oCACI,kBAACiF,GAAA,EAAD,CACInJ,UAAU,MACV6E,aAAW,4BACX1E,UAAWT,EAAQxG,WAElBnE,EAAMI,eACFE,QAAO,SAACC,GAAD,OACJA,EAAKiC,YAAY0R,cAAcG,SAAS3B,MAE3C4B,KAAI,SAAC/T,EAAMgU,GAAP,OACD,kBAAC,GAAD,CACI1P,IAAKtE,EAAKC,IACVD,KAAMA,EACN+B,YAAatC,EAAMsC,YACnB6O,YAAU,EACVC,MAAOmD,EACP7E,KAAMA,QAItB,kBAACyE,GAAA,EAAD,OAGR,kBAACC,GAAA,EAAD,CACInJ,UAAU,MACV6E,aAAW,4BACX1E,UAAWT,EAAQxG,WAElBnE,EAAMkE,MACF5D,QACG,SAACC,GAAD,OACIA,EAAKC,MAAQR,EAAMsC,YAAY9B,MAC9BR,EAAMI,eAAeoR,MAAK,SAACgD,GAAD,OAAOA,EAAEhU,MAAQD,EAAKC,UAExD8T,KAAI,SAAC/T,GAAD,OACD,kBAAC,GAAD,CACIsE,IAAKtE,EAAKC,IACVD,KAAMA,EACN+B,YAAatC,EAAMsC,YACnBoN,KAAMA,U,cC9F3B7G,iBAAW,SAACC,GAAD,MAAY,CAClC2L,UAAW,CACPvB,QAASpK,EAAMG,QAAQ,GACvB2F,KAAM,GAEV8F,YAAa,CACTxL,QAAS,OACTC,cAAe,OAEnBwL,WAAY,CACRC,SAAU,EACVnG,YAAa3F,EAAMG,QAAQ,IAE/BY,OAAQ,CACJ+E,KAAM,EACNhF,MAAO,GACPqH,OAAQ,GACR/F,SAAU,GACVyH,aAAc,WCiEPkC,GAxEc,WAA2B,IAC5C7U,EAAU+O,qBAAWjH,GAArB9H,MACF2K,EAAUC,KAEVkK,EAAoB,SAAChK,GACvBqF,EAAgB1I,YAAY,CACxBzB,SAAUhG,EAAMsC,YAAY9B,IAC5ByF,WAAYjG,EAAMI,eAAe,GAAGI,IACpCuC,KAAM+H,EAAO/H,KACb+C,MAAM,KAId,OACI,oCACI,kBAAC,IAAD,CACI0F,gBAAc,EACdC,cAAe,CAAE1I,KAAM,IACvB4I,SAAU,SAACb,EAAD,GAAqC,IAAjBiK,EAAgB,EAAhBA,UAC1BD,EAAkBhK,GAClBiK,EAAU,OAGb,gBAAGlK,EAAH,EAAGA,aAAckB,EAAjB,EAAiBA,aAAcjB,EAA/B,EAA+BA,OAAQkB,EAAvC,EAAuCA,WAAY+I,EAAnD,EAAmDA,UAAnD,OACG,0BAAMpJ,SAAUd,GACZ,kBAACmK,GAAA,EAAD,CAAa7I,WAAS,EAACf,UAAWT,EAAQ+J,aACtC,kBAAC,IAAD,CACI5I,SAAO,EACPS,SAAUrC,GACV9H,KAAK,OACLoK,OAAQ,kBACJ,kBAACN,EAAA,EAAD,CACIvD,MAAOmC,EAAO/H,MAAQ,GACtBX,KAAK,OACLmC,GAAG,iBACH6H,MAAM,qBACNb,QAAQ,WACR0J,WAAS,EACTC,QAAS,EACT5I,OAAQN,EACRK,SAAUN,EACVX,UAAWT,EAAQgK,WACnBQ,UAAW,SAAC1E,GACM,UAAVA,EAAE5L,KACFiQ,EAAkBhK,IAG1BsK,QAAS,SAAC3E,GACQ,UAAVA,EAAE5L,KACFkQ,EAAU,UAM9B,kBAAC/H,EAAA,EAAD,CACI9M,KAAK,SACLqL,QAAQ,YACRwB,MAAM,YACN3B,UAAWT,EAAQd,OACnBoD,SAA0B,KAAhBnC,EAAO/H,MALrB,eCrDbsS,GAR+C,SAAC,GAAD,IAC1DC,EAD0D,EAC1DA,aAD0D,OAG1D,gBAACtI,EAAA,EAAD,CAAQzB,QAAQ,YAAYwB,MAAM,YAAYZ,WAAS,EAACqB,QAAS8H,GAAjE,mBCRWzM,iBAAW,SAACC,GAAD,MAAY,CAClC+K,KAAM,CACF3K,QAAS,OACTqM,UAAW,SAEfC,aAAc1M,EAAM2M,OAAOhI,QAC3BiI,QAAS,CACLd,SAAU,EACV3D,OAAQ,QACR0E,SAAU,QAEdxI,UAAW,CACPjE,QAAS,OACTC,cAAe,SACf8H,OAAQ,qBAEZ2E,cAAe,CACXhB,SAAU,EACViB,aAAa,aAAD,OAAe/M,EAAMU,QAAQoH,KAAK,MAC9CkF,UAAW,QAEfC,YAAa,CACTC,OAAQ,UACR,UAAW,CACPzM,gBAAiBT,EAAMU,QAAQoH,KAAK,MAExCsC,QAASpK,EAAMG,QAAQ,IAE3BgN,qBAAsB,CAClB1M,gBAAiB,UACjB2B,SAAU,MACVgI,QAASpK,EAAMG,QAAQ,GACvBiN,MAAO,QAEXC,iBAAkB,CACd5M,gBAAiB,UACjB2B,SAAU,MACVgI,QAASpK,EAAMG,QAAQ,GACvBiN,MAAO,SAEXzB,UAAW,CACPvB,QAASpK,EAAMG,QAAQ,GACvB2F,KAAM,GAEV8F,YAAa,CACTxL,QAAS,OACTC,cAAe,OAEnBwL,WAAY,CACRC,SAAU,EACVnG,YAAa3F,EAAMG,QAAQ,IAE/BY,OAAQ,CACJ+E,KAAM,EACNhF,MAAO,GACPqH,OAAQ,GACR/F,SAAU,GACVyH,aAAc,W,UCzDP9J,iBAAW,SAACC,GAAD,OACtBsN,aAAa,CACTrN,MAAO,CACHyG,SAAU,WACV5F,MAAO,IACPsJ,QAASpK,EAAMG,QAAQ,GACvBM,gBAAiBT,EAAMU,QAAQ6M,WAAWtN,MAC1C+F,eAAgB,SAChB1F,WAAY,SACZkN,IAAK,MACLC,KAAM,MACNC,UAAW,wBACXC,QAAS,a,UCeNC,GAnB6B,SAAC,GAIZ,IAH7B9N,EAG4B,EAH5BA,SACA+N,EAE4B,EAF5BA,UACAC,EAC4B,EAD5BA,YAEMjM,EAAUC,KAEhB,OACI,kBAACiM,GAAA,EAAD,CACInH,KAAMiH,EACNG,QAASF,EACTG,kBAAgB,qBAChBC,mBAAiB,4BAEjB,yBAAK5L,UAAWT,EAAQ5B,OAAQH,KCuH7BqO,GAlIY,WAAO,IAAD,MACDlI,qBAAWjH,GAA/B9H,EADqB,EACrBA,MAAO0E,EADc,EACdA,SACTiG,EAAUC,KAFa,EAGKL,oBAAkB,GAHvB,mBAGtB2M,EAHsB,KAGXC,EAHW,OAIL5M,oBAAkB,GAJb,mBAItBmF,EAJsB,KAIhB0H,EAJgB,OAKa7M,qBALb,mBAKtB9D,EALsB,KAKP4Q,EALO,OAMiB9M,qBANjB,mBAMtB+M,EANsB,KAMLC,EANK,KAOvBjV,EAActC,EAAMsC,aAAe,KACnCkV,EAAe,WACjBJ,GAAS1H,IA6Cb,OA3BAR,qBAAU,WACa,MAAf5M,GACAkR,EAAazP,eAAeW,KAEjC,CAACA,EAAUpC,IAEd4M,qBAAU,WAAO,IAAD,EACgB,GAA5B,UAAIlP,EAAMsC,mBAAV,aAAI,EAAmB9B,OACnB2P,EAAgB7I,mBAAmBtH,EAAMsC,YAAaoC,GACtD8O,EAAahP,aAAb,UAA0BxE,EAAMsC,mBAAhC,aAA0B,EAAmB9B,IAAKkE,GAClDyL,EAAgB3I,kBAAkBxH,EAAMsC,YAAY9B,IAAKkE,MAG9D,QAACpC,QAAD,IAACA,OAAD,EAACA,EAAa9B,IAAKR,EAAMsC,cAE5B4M,qBAAU,WACFlP,EAAMI,eAAe+O,OAAS,GAA+B,IAA1BnP,EAAMS,SAAS0O,SAClDgB,EAAgBpK,eACZ/F,EAAMsC,YAAY9B,IAClBR,EAAMI,eAAe,GAAGI,IACxBkE,GAEJyL,EAAgB1K,cAAczF,EAAMsC,YAAY9B,IAAKR,EAAMI,eAAe,GAAGI,QAGlF,WAACR,EAAMI,eAAe,UAAtB,aAAC,EAAyBI,MAGzB,oCACI,yBAAK4K,UAAWT,EAAQkJ,MACpB,kBAAC1I,EAAA,EAAD,MACA,kBAAC,GAAD,CACI4E,iBAAkByH,EAClBvH,kBAAmBuH,EACnB9H,KAAMA,IAEV,kBAAC,GAAD,CAAQA,KAAMA,IACd,0BAAMtE,UAAWT,EAAQ+K,SACrB,yBAAKtK,UAAWT,EAAQ6K,eACxB,kBAACxK,EAAA,EAAD,CAAWE,SAAS,KAAKE,UAAWT,EAAQwC,UAAWsK,gBAAc,GACjE,kBAACvK,EAAA,EAAD,CACIE,MAAI,EACJC,GAAI,GACJjC,UAAWT,EAAQiL,cACnBpI,QAvDF,WAAO,IAAD,EACxB2C,EAAgB1K,cAAczF,EAAMsC,YAAY9B,IAAhD,UAAqDR,EAAMI,eAAe,UAA1E,aAAqD,EAAyBI,QAwDzD,UAAAR,EAAMI,sBAAN,eAAsB+O,QAAS,GAC5BnP,EAAMS,SACDH,QACG,SAACI,GAAD,OACIA,EAAIuF,aAAejG,EAAMI,eAAe,GAAGI,KAC3CE,EAAIsF,WAAahG,EAAMI,eAAe,GAAGI,OAEhD8T,KAAI,SAACxT,GAAD,OACDA,EAAQmF,aAAejG,EAAMsC,YAAY9B,IACrC,kBAAC0M,EAAA,EAAD,CACI9B,UAAWT,EAAQoL,YACnB5I,WAAS,EACTtI,IAAK/D,EAAQH,OACb6M,QAAS,WACL2J,GAAa,GACbI,EAAmBzW,GACnBuW,EAAiB,cAGrB,kBAACK,GAAA,EAAD,CAAOtM,UAAWT,EAAQsL,sBACrBnV,EAAQiC,OAIjB,kBAACmK,EAAA,EAAD,CACI9B,UAAWT,EAAQoL,YACnB5I,WAAS,EACTwK,QAAQ,WACR9S,IAAK/D,EAAQH,OACb6M,QAAS,WACL2J,GAAa,GACbI,EAAmBzW,GACnBuW,EAAiB,YAGrB,kBAACK,GAAA,EAAD,CAAOtM,UAAWT,EAAQwL,kBACrBrV,EAAQiC,WAMrC,kBAACmK,EAAA,EAAD,CAAME,MAAI,EAACC,GAAI,GAAIjC,UAAWT,EAAQ8J,WAClC,kBAAC,GAAD,UAKhB,kBAAC,GAAD,CACIkC,UAAWO,EACXN,YA/GQ,WAChBO,GAAa,IA+GLvO,SAAU,kBAAC,GAAD,CAAY0M,aAxGN,WACpBgC,GAAmB7Q,GACnB0J,EAAgB3J,cAAc8Q,EAAiB7Q,EAAe/B,GAElEyS,GAAa,U,UCnCNtO,iBAAW,SAACC,GAAD,YAAY,CAClC8O,OAAO,cACH1O,QAAS,OACTC,cAAe,SACfC,WAAY,SACZyO,WAAY/O,EAAMG,QAAQ,GAC1B6F,eAAgB,SAChBlF,MAAO,OACP0E,WAAYxF,EAAMG,QAAQ,GAC1BwF,YAAa3F,EAAMG,QAAQ,IAC1BH,EAAM0J,YAAYC,GAAG,IAAyB,EAAnB3J,EAAMG,QAAQ,IAAU,CAChDW,MAAO,IACP0E,WAAY,OACZG,YAAa,SAGrB1F,OAAK,GACDC,UAAWF,EAAMG,QAAQ,GACzB4J,aAAc/J,EAAMG,QAAQ,GAC5BW,MAAO,IACPsJ,QAASpK,EAAMG,QAAQ,IAJtB,eAKAH,EAAM0J,YAAYC,GAAG,IAAyB,EAAnB3J,EAAMG,QAAQ,IAAU,CAChDD,UAAWF,EAAMG,QAAQ,GACzB4J,aAAc/J,EAAMG,QAAQ,GAC5BiK,QAASpK,EAAMG,QAAQ,KAR1B,yBAUQ,QAVR,GAYL0E,OAAQ,CACJ6B,SAAU,YAEdb,MAAO,CACHiG,SAAU,GAEdkD,YAAa,CACT9O,UAAW,GAEf+O,cAAe,CACXvI,SAAU,WACVwG,OAAQ,WAEZgC,SAAU,CACNxI,SAAU,WACV8G,IAAK,EACL2B,OAAQ,GACRrK,OAAQ,EACRoI,OAAQ,WAEZkC,UAAW,CACPhP,QAAS,QAEb6H,OAAQ,CACJxH,gBAAiB,UAErB4O,MAAO,CACHvO,MAAOd,EAAMG,QAAQ,IACrBgI,OAAQnI,EAAMG,QAAQ,SCsGfqB,gBA1I8B,SAAC9B,GAA0B,IAAD,EAC7DmC,EAAUC,KADmD,EAE3CL,qBAF2C,mBAE5DnI,EAF4D,KAEtDgW,EAFsD,OAGrC7N,qBAHqC,mBAG5DzJ,EAH4D,KAGnD0J,EAHmD,OAI3CD,qBAJ2C,mBAI5D7G,EAJ4D,KAItD2U,EAJsD,OAK3B9N,qBAL2B,mBAK5D+N,EAL4D,KAK9CC,EAL8C,OAM3ChO,mBAAmClD,EAAStD,kBAND,mBAM5DxD,EAN4D,KAMtDiY,EANsD,KAQ7D3N,EAAY,uCAAG,8BAAA9I,EAAA,sEACMsF,EAAS5D,kBAAkBC,EAAMtB,GADvC,OAEQ,aAAb,QADNqW,EADW,cAEL,IAARA,OAAA,EAAAA,EAAU3V,SACV0V,EAAQnR,EAAStD,kBAErByG,EAAWiO,GACLhH,EAAQC,YAAW,WACrBlH,EAAW,MACXmH,aAAaF,KACd,KATc,2CAAH,qDAqBlB,OACI,kBAAC,IAAMiH,SAAP,KACI,kBAACvN,EAAA,EAAD,MAEA,kBAACoE,GAAA,EAAD,CAAQC,SAAS,WAAWzC,MAAM,UAAU3B,UAAWT,EAAQgD,QAC3D,kBAACgC,GAAA,EAAD,KACI,kBAACrE,EAAA,EAAD,CAAYC,QAAQ,KAAKwB,MAAM,UAAU4L,QAAM,EAACvN,UAAWT,EAAQgE,OAAnE,WAGA,kBAAC3B,EAAA,EAAD,CAAQ4L,UAAW,kBAACC,GAAA,EAAD,MAAerL,QAAS,kBAAMhF,EAAMuC,QAAQ+N,WAA/D,aAMR,0BAAM1N,UAAWT,EAAQiN,QACpB9W,GAAW,kBAAC,GAAD,CAAcgC,OAAQhC,EAAQgC,OAAQC,KAAMjC,EAAQiC,OAChE,kBAAC2U,GAAA,EAAD,CAAOtM,UAAWT,EAAQ5B,OACtB,kBAACmE,EAAA,EAAD,CAAMC,WAAS,EAAC/D,WAAW,SAAS2P,UAAU,SAAS9P,QAAS,GAC5D,kBAACiE,EAAA,EAAD,CAAME,MAAI,GACL7M,GACG,yBAAK6K,UAAWT,EAAQoN,eACpB,2BACIxT,GAAG,qBACHrE,KAAK,OACL8Y,OAAO,wBACP5N,UAAWT,EAAQuN,UACnB7L,SApCjB,SAACoE,GAEhB,GADAA,EAAEC,iBACED,EAAEwD,OAAOgF,MAAO,CAChB,IAAM3V,EAAM4V,IAAIC,gBAAgB1I,EAAEwD,OAAOgF,MAAM,IAC/CZ,EAAQ5H,EAAEwD,OAAOgF,MAAM,IACvBV,EAAgBjV,OAiCQ,2BAAO8V,QAAQ,sBACX,kBAACC,GAAA,EAAD,CACItM,MAAM,UACNsD,SAAS,QACTjF,UAAWT,EAAQqN,YAG1BM,GAAgB/X,EAAKqC,SAClB,kBAACyI,EAAA,EAAD,CACIyG,KAAS,OAAJvR,QAAI,IAAJA,OAAA,EAAAA,EAAMiC,eAAN,OAAqBjC,QAArB,IAAqBA,OAArB,EAAqBA,EAAMsB,aAASkQ,EACzCC,IAAKsG,GAAgB/X,EAAKqC,eAAYmP,EACtC3G,UAAWT,EAAQwN,QAGvB,kBAAC9M,EAAA,EAAD,CAAQD,UAAWqE,aAAK9E,EAAQoG,OAAQpG,EAAQwN,QAAhD,OACK5X,QADL,IACKA,GADL,UACKA,EAAMiC,mBADX,aACK,EAAmByP,MAAM,EAAG,MAMjD,kBAAC/E,EAAA,EAAD,CAAME,MAAI,EAACC,GAAI,IACX,kBAACnB,EAAA,EAAD,CACI3H,GAAG,iBACH6H,MAAM,OACNb,QAAQ,WACR+N,aAAY,OAAE/Y,QAAF,IAAEA,OAAF,EAAEA,EAAMiC,YACpB2J,WAAS,EACT7C,OAAO,SACP+C,SAAU,SAACoE,GAAD,OAAO2H,EAAQ3H,EAAEwD,OAAOtL,UAEtC,kBAACuD,EAAA,EAAD,CACI3H,GAAG,iBACH6H,MAAM,QACNb,QAAQ,WACR+N,aAAY,OAAE/Y,QAAF,IAAEA,OAAF,EAAEA,EAAMsB,MACpBsK,WAAS,EACT7C,OAAO,SACP2D,UAAQ,IAEZ,kBAACC,EAAA,EAAD,CACIC,WAAS,EACTwK,QAAQ,WACR1O,QAAS,EACTG,WAAW,SACXgC,UAAWT,EAAQmN,aAEnB,kBAAC5K,EAAA,EAAD,CAAME,MAAI,GACN,kBAACJ,EAAA,EAAD,CACIzB,QAAQ,YACRwB,MAAM,UACNS,QAAS,SAACiD,GACNA,EAAEC,iBACF7F,KAEJoC,UACa,MAAR7K,GAAyB,KAATA,IAAgC,MAAhBkW,GARzC,WAcJ,kBAACpL,EAAA,EAAD,CAAME,MAAI,GACN,kBAACJ,EAAA,EAAD,CACIzB,QAAQ,YACRwB,MAAM,YACNS,QAAS,kBAAMhF,EAAMuC,QAAQ+N,WAHjC,oB,8BC5H9BhQ,GAAQyQ,aAAe,CACzB/P,QAAS,CACLtJ,KAAM,UAyBCoT,GArBsB,WAAoB,IAAD,EACE/I,oBAAS,GADX,mBAC7CiP,EAD6C,KACxBC,EADwB,KAQpD,OALAvK,qBAAU,WACN7H,EAASqS,gBAAgBrW,MAAK,SAACsW,GAC3BF,EAAuBE,QAE5B,KAC4B,IAAxBH,EACH,kBAACI,GAAA,EAAD,CAAe9Q,MAAOA,IAClB,kBAAC,IAAD,KACI,kBAAC,IAAD,CAAO+Q,OAAK,EAACC,KAAK,IAAI7O,UAAW8O,KACjC,kBAAC,IAAD,CAAOD,KAAK,QAAQ7O,UAAWgM,KAC/B,kBAAC,IAAD,CAAO6C,KAAK,WAAW7O,UAAW+O,OAI1C,kBAACC,GAAA,EAAD,OCnCRC,IAAS1N,OACL,kBAAC,IAAM2N,WAAP,KACI,kBAAC,IAAD,CAAQC,SAAUC,OAAOC,SAASC,UAAY,IAC1C,kBAAChS,EAAD,KACI,kBAAC,GAAD,SAIZiS,SAASC,eAAe,W","file":"static/js/main.925294f5.chunk.js","sourcesContent":["export default {\n    // USERS TYPES\n    GET_ALL_USERS: 'GET_ALL_USERS',\n    GET_CURRENT_USER: 'GET_CURRENT_USER',\n    GET_USERS_WITH_CHATS: 'GET_USERS_WITH_CHATS',\n\n    // CHAT USER TYPES\n    SET_USERS_WITH_CHATS: 'SET_USERS_WITH_CHATS',\n    SEND_CHAT_MESSAGE: 'SEND_CHAT_MESSAGE',\n    GET_CHAT_MESSAGES: 'GET_CHAT_MESSAGES',\n    GET_NEW_MESSAGES: 'GET_NEW_MESSAGES',\n    RESET_CHAT_MESSAGES: 'RESET_CHAT_MESSAGES',\n    ON_DELETE_MESSAGE: 'ON_DELETE_MESSAGE',\n    ON_DELETE_CHAT: 'ON_DELETE_CHAT',\n    GET_USER_CHATS: 'GET_USER_CHATS',\n    SET_CHAT_AS_READ: 'SET_CHAT_AS_READ',\n    ON_CURRENT_CHAT_USER: 'ON_CURRENT_CHAT_USER',\n};\n","import TYPES from '../action-types';\nimport IAction from 'interfaces/action-interface';\n\nconst ChatUserReducer = (state, action: IAction) => {\n    switch (action.type) {\n        case TYPES.SET_USERS_WITH_CHATS:\n            return {\n                ...state,\n                usersWithChats: [\n                    action.payload,\n                    ...state.usersWithChats.filter((user) => user.uid !== action.payload.uid),\n                ],\n            };\n\n        case TYPES.ON_CURRENT_CHAT_USER:\n            return {\n                ...state,\n                usersWithChats: state.usersWithChats.filter((user) => user.uid !== action.payload),\n            };\n\n        case TYPES.GET_CHAT_MESSAGES:\n            return {\n                ...state,\n                messages: [\n                    ...state.messages.filter((msg) => msg.chatId !== action.payload.chatId),\n                    action.payload,\n                ],\n            };\n\n        case TYPES.GET_USER_CHATS:\n            return {\n                ...state,\n                userChats: [\n                    ...state.userChats.filter((uChats) => uChats.uid !== action.payload.uid),\n                    action.payload,\n                ],\n            };\n\n        case TYPES.RESET_CHAT_MESSAGES:\n            return { ...state, messages: [] };\n\n        case TYPES.ON_DELETE_MESSAGE:\n            return {\n                ...state,\n                messages: state.messages.filter((message) => message.chatId !== action.payload),\n            };\n\n        case TYPES.ON_DELETE_CHAT:\n            return {\n                ...state,\n                messages: state.usersWithChats.uid === action.payload ? [] : state.messages,\n            };\n\n        default:\n            return state;\n    }\n};\n\nexport default ChatUserReducer;\n","/* eslint-disable no-undef */\nimport app from 'firebase/app';\nimport Firebase from 'firebase';\nimport 'firebase/auth';\nimport 'firebase/firebase-firestore';\nimport 'firebase/firebase-storage';\nimport 'firebase/firebase-database';\nimport IUser from 'interfaces/user-interface';\nimport IChat from 'interfaces/chat-interface';\nimport IMessage from 'interfaces/message-interface';\nimport IAction from 'interfaces/action-interface';\nimport TYPES from 'store/action-types';\n\n// Your web app's Firebase configuration\nconst config = {\n    apiKey: process.env.REACT_APP_API_KEY,\n    authDomain: process.env.REACT_APP_AUTH_DOMAIN,\n    databaseURL: process.env.REACT_APP_DATABASE_URL,\n    projectId: process.env.REACT_APP_PROJECT_ID,\n    storageBucket: process.env.REACT_APP_STORAGE_BUCKET,\n    messagingSenderId: process.env.REACT_APP_MESSAGING_SENDER_ID,\n    appId: process.env.REACT_APP_APP_ID,\n};\n\n// Initialize Firebase\nclass FirebaseClass {\n    auth: app.auth.Auth;\n    db: app.firestore.Firestore;\n    rtdb: app.database.Database;\n    storage: app.storage.Storage;\n\n    constructor() {\n        app.initializeApp(config);\n        this.auth = app.auth();\n        this.db = app.firestore();\n        this.rtdb = app.database();\n        this.storage = app.storage();\n    }\n\n    public login = async (email: string, password: string): Promise<any> => {\n        return await this.auth.signInWithEmailAndPassword(email, password);\n    };\n\n    public logout = (): void => {\n        this.auth.signOut();\n    };\n\n    public register = async (\n        name: string,\n        email: string,\n        password: string,\n    ): Promise<any | IMessage> => {\n        try {\n            const { user } = await this.auth.createUserWithEmailAndPassword(email, password);\n            await this.auth.currentUser?.updateProfile({\n                displayName: name,\n            });\n            return await this.db.collection('Users').doc(`${user?.uid}`).set({\n                displayName: user?.displayName,\n                email: user?.email,\n                photoURL: user?.photoURL,\n                emailVerified: user?.emailVerified,\n                uid: user?.uid,\n            });\n        } catch (err) {\n            return { status: 'error', text: err };\n        }\n    };\n\n    public isInitialized(): Promise<any> {\n        return new Promise((resolve) => {\n            this.auth.onAuthStateChanged(resolve);\n        });\n    }\n\n    private updateProfileAvatar = (fullPath: string): void => {\n        const storageRef = this.storage.ref();\n        storageRef\n            .child(fullPath)\n            .getDownloadURL()\n            .then((url) => this.auth.currentUser?.updateProfile({ photoURL: url }))\n            .catch((err) => {\n                throw err;\n            });\n    };\n\n    public updateUserProfile = async (\n        file: File | undefined,\n        name: string | undefined,\n    ): Promise<IMessage> => {\n        try {\n            if (name) {\n                this.auth.currentUser?.updateProfile({ displayName: name });\n            }\n            if (file) {\n                const storageRef = this.storage.ref();\n                const fileRef = storageRef.child(`images/${file?.name}`);\n                const { metadata } = await fileRef.put(file);\n                this.updateProfileAvatar(metadata.fullPath);\n            }\n            return { status: 'success', text: 'Your profile has been updated' };\n        } catch (err) {\n            return { status: 'error', text: err };\n        }\n    };\n\n    public getCurrentUser = (): IUser | null => {\n        const user = this.auth.currentUser;\n        if (user != null) {\n            return {\n                displayName: user.displayName,\n                email: user.email,\n                photoURL: user.photoURL,\n                emailVerified: user.emailVerified,\n                uid: user.uid,\n            };\n        }\n        return null;\n    };\n\n    public getUsers = async (): Promise<IUser[]> => {\n        const users = await this.db.collection('Users').get();\n        const usersList: IUser[] = [];\n        users.forEach((user) => {\n            usersList.push({ ...user.data(), uid: user.id });\n        });\n        return usersList;\n    };\n\n    public getChatUsers = (currentUserId: string, dispatch: (args: IAction) => IAction): any => {\n        try {\n            this.rtdb.ref(`users-chats/${currentUserId}`).on('child_added', (snapshot) => {\n                dispatch({\n                    type: TYPES.GET_USERS_WITH_CHATS,\n                    payload: snapshot.key,\n                });\n            });\n        } catch (err) {\n            throw err;\n        }\n    };\n\n    public getCurrentChatUser = (userId: string, dispatch: (args: IAction) => IAction): void => {\n        this.rtdb.ref(`/current-user-chat/${userId}`).on('child_changed', (snapshot) => {\n            dispatch({\n                type: TYPES.SET_USERS_WITH_CHATS,\n                payload: { ...snapshot.val(), uid: snapshot.key },\n            });\n        });\n        this.rtdb.ref(`/current-user-chat/${userId}`).once('value', (snapshot) => {\n            snapshot.forEach((user) => {\n                dispatch({\n                    type: TYPES.SET_USERS_WITH_CHATS,\n                    payload: { ...user.val(), uid: user.key },\n                });\n            });\n        });\n    };\n\n    public setCurrentChatUser = async (currentUser: IUser, userWithChats: IUser): Promise<void> => {\n        try {\n            this.rtdb.ref(`/current-user-chat/${currentUser.uid}/${userWithChats.uid}`).set({\n                ...userWithChats,\n                createdAt: Firebase.database.ServerValue.TIMESTAMP,\n            });\n        } catch (err) {\n            throw err;\n        }\n    };\n\n    public setChatAsRead = async (currentUserId: string, chatUserId: string): Promise<void> => {\n        try {\n            const chatRef = await this.rtdb.ref(`users-chats/${currentUserId}/${chatUserId}`);\n            await chatRef.once('value', (snapshot) => {\n                snapshot.forEach((snap) => {\n                    this.rtdb\n                        .ref(`users-chats/${currentUserId}/${chatUserId}`)\n                        .child(`${snap.key}`)\n                        .update({ read: true });\n                });\n            });\n        } catch (err) {\n            throw err;\n        }\n    };\n\n    public getCurrentChat = async (\n        senderId: string,\n        receiverId: string,\n        dispatch: (args: IAction) => IAction,\n    ): Promise<any> => {\n        try {\n            await this.rtdb\n                .ref(`users-chats/${senderId}/${receiverId}`)\n                .on('child_added', (snapshot) => {\n                    dispatch({\n                        type: TYPES.GET_CHAT_MESSAGES,\n                        payload: { ...snapshot.val(), chatId: snapshot.key },\n                    });\n                });\n            await this.rtdb\n                .ref(`users-chats/${senderId}/${receiverId}`)\n                .once('value', (snapshot) => {\n                    dispatch({\n                        type: TYPES.GET_CHAT_MESSAGES,\n                        payload: { ...snapshot.val(), chatId: snapshot.key },\n                    });\n                });\n        } catch (err) {\n            throw err;\n        }\n    };\n\n    public getUserChats = async (currentUserId: string, dispatch: (args: IAction) => IAction) => {\n        try {\n            await this.rtdb.ref(`users-chats/${currentUserId}`).on('child_added', (snapshot) => {\n                snapshot.forEach((msg) => {\n                    dispatch({\n                        type: TYPES.GET_USER_CHATS,\n                        payload: { ...msg.val(), user: snapshot.key },\n                    });\n                });\n            });\n            await this.rtdb.ref(`users-chats/${currentUserId}`).on('child_changed', (snapshot) => {\n                snapshot.forEach((msg) => {\n                    dispatch({\n                        type: TYPES.GET_USER_CHATS,\n                        payload: { ...msg.val(), user: snapshot.key },\n                    });\n                });\n            });\n        } catch (err) {}\n    };\n\n    public addNewMessageToChat = (chat: IChat): any => {\n        try {\n            const chatKey = this.rtdb.ref(`users-chats/${chat.senderId}/${chat.receiverId}/`).push()\n                .key;\n            if (chatKey) {\n                this.rtdb\n                    .ref(`users-chats/${chat.senderId}/${chat.receiverId}`)\n                    .child(chatKey)\n                    .set({ ...chat, uid: chatKey, read: true, user: chat.receiverId });\n                this.rtdb\n                    .ref(`users-chats/${chat.receiverId}/${chat.senderId}`)\n                    .child(chatKey)\n                    .set({ ...chat, uid: chatKey, user: chat.senderId });\n            }\n        } catch (err) {\n            throw err;\n        }\n    };\n\n    public removeFromUsersWithChats = async (\n        currentUserId: string,\n        chatUserId: string,\n        dispatch: (args: IAction) => IAction,\n    ): Promise<void> => {\n        try {\n            const userChatRef = await this.rtdb.ref(\n                `current-user-chat/${currentUserId}/${chatUserId}`,\n            );\n            userChatRef.remove();\n            dispatch({\n                type: TYPES.ON_CURRENT_CHAT_USER,\n                payload: chatUserId,\n            });\n        } catch (err) {\n            throw err;\n        }\n    };\n\n    public deleteMessage = async (\n        chat: IChat,\n        messageWriter: string,\n    ): Promise<string | undefined> => {\n        let reference = `users-chats/${chat.senderId}/${chat.receiverId}/${chat.chatId}`;\n        if (messageWriter === 'receiver') {\n            reference = `users-chats/${chat.receiverId}/${chat.senderId}/${chat.chatId}`;\n        }\n        try {\n            const messageRef = await this.rtdb.ref(reference);\n            messageRef.remove();\n            return chat.chatId;\n        } catch (err) {\n            throw err;\n        }\n    };\n\n    public deleteChat = async (\n        currentUser: IUser,\n        chatUser: IUser,\n        dispatch: (args: IAction) => IAction,\n    ): Promise<void> => {\n        try {\n            const chatRef = await this.rtdb.ref(`users-chats/${currentUser.uid}/${chatUser.uid}`);\n            chatRef.remove();\n            dispatch({\n                type: TYPES.ON_DELETE_CHAT,\n                payload: chatUser.uid,\n            });\n            this.removeFromUsersWithChats(currentUser.uid, chatUser.uid, dispatch);\n        } catch (err) {\n            throw err;\n        }\n    };\n}\n\nexport default new FirebaseClass();\n","import TYPES from '../action-types';\nimport IAction from 'interfaces/action-interface';\nimport IUser from 'interfaces/user-interface';\nimport firebase from 'firebase-config';\nimport IChat from 'interfaces/chat-interface';\n\nconst setChatUser = async (currentUser: IUser, userWithChats: IUser) =>\n    firebase.setCurrentChatUser(currentUser, userWithChats);\n\nconst setChatAsRead = async (currentUserId: string, chatUserId: string): Promise<void> => {\n    firebase.setChatAsRead(currentUserId, chatUserId);\n};\n\nconst resetChatMessages = (dispatch: (args: IAction) => IAction): void => {\n    dispatch({\n        type: TYPES.RESET_CHAT_MESSAGES,\n        payload: null,\n    });\n};\n\nconst getInitialChatUser = async (currentUser: IUser, dispatch: (args: IAction) => IAction) =>\n    firebase.getCurrentChatUser(currentUser.uid, dispatch);\n\nconst getCurrentChat = async (\n    currentUserId: string,\n    chatUserId: string,\n    dispatch: (args: IAction) => IAction,\n) => {\n    firebase.getCurrentChat(currentUserId, chatUserId, dispatch);\n};\n\nconst getUsersWithChats = async (\n    currentUserId: string,\n    dispatch: (args: IAction) => IAction,\n): Promise<void> => {\n    firebase.getUserChats(currentUserId, dispatch);\n};\n\nconst sendMessage = async (chat: IChat): Promise<void> => {\n    firebase.addNewMessageToChat(chat);\n};\n\nconst removeFromUsersWithChats = async (\n    currentUserId: string,\n    chatUserId: string,\n    dispatch: (args: IAction) => IAction,\n): Promise<void> => firebase.removeFromUsersWithChats(currentUserId, chatUserId, dispatch);\n\nconst deleteMessage = async (\n    chat: IChat,\n    messageWriter: string,\n    dispatch: (args: IAction) => IAction,\n): Promise<void> => {\n    dispatch({\n        type: TYPES.ON_DELETE_MESSAGE,\n        payload: await firebase.deleteMessage(chat, messageWriter),\n    });\n};\n\nconst deleteChat = async (\n    currentUser: IUser,\n    chatUser: IUser,\n    dispatch: (args: IAction) => IAction,\n): Promise<void> => firebase.deleteChat(currentUser, chatUser, dispatch);\n\nexport default {\n    setChatUser,\n    setChatAsRead,\n    resetChatMessages,\n    getCurrentChat,\n    getUsersWithChats,\n    sendMessage,\n    getInitialChatUser,\n    removeFromUsersWithChats,\n    deleteMessage,\n    deleteChat,\n};\n","import TYPES from '../action-types';\nimport IAction from 'interfaces/action-interface';\n\nconst UsersReducer = (state, action: IAction) => {\n    switch (action.type) {\n        case TYPES.GET_ALL_USERS:\n            return { ...state, users: action.payload };\n        case TYPES.GET_CURRENT_USER:\n            return { ...state, currentUser: action.payload };\n        case TYPES.GET_USERS_WITH_CHATS:\n            return { ...state, chatUsers: [...state.chatUsers, action.payload] };\n        default:\n            return state;\n    }\n};\n\nexport default UsersReducer;\n","import TYPES from '../action-types';\nimport IAction from 'interfaces/action-interface';\nimport firebase from 'firebase-config';\n\nconst getAllUsers = async (dispatch: (args: IAction) => IAction) =>\n    dispatch({\n        type: TYPES.GET_ALL_USERS,\n        payload: await firebase.getUsers(),\n    });\n\nconst getCurrentUser = async (dispatch: (args: IAction) => IAction): Promise<any> =>\n    dispatch({\n        type: TYPES.GET_CURRENT_USER,\n        payload: await firebase.getCurrentUser(),\n    });\n\nconst getChatUsers = (currentUserId: string, dispatch: (args: IAction) => IAction): void =>\n    firebase.getChatUsers(currentUserId, dispatch);\n\nexport default { getAllUsers, getCurrentUser, getChatUsers };\n","import React, { ReactChild } from 'react';\nimport { ChatUserReducer } from './chat-user-state';\nimport { UsersReducer } from './users-state';\nimport IAction from 'interfaces/action-interface';\n\nconst initialState: any = {\n    users: [],\n    usersWithChats: [],\n    currentUser: null,\n    messages: [],\n    chatUsers: [],\n    userChats: [],\n};\n\nexport const Store = React.createContext<any>(initialState);\n\n// const rootReducer = (state: any, action: IAction) => {\n//     switch (action.type) {\n//         default:\n//             return state;\n//     }\n// };\n\nconst reduceReducers = (...reducers: Array<any>) => (state: any, action: IAction) =>\n    reducers.reduce((acc, nextReducer) => nextReducer(acc, action), state);\n\nconst rootReducer = reduceReducers(UsersReducer, ChatUserReducer);\n\ntype Props = {\n    children: ReactChild | NameChildrenSlots;\n};\n\ntype NameChildrenSlots = {\n    header?: ReactChild;\n    media?: ReactChild;\n    content?: ReactChild;\n    action?: ReactChild;\n};\n\nexport function StoreProvider(props: Props): JSX.Element {\n    const [state, dispatch] = React.useReducer(rootReducer, initialState);\n\n    return <Store.Provider value={{ state, dispatch }}>{props.children}</Store.Provider>;\n}\n","import { makeStyles } from '@material-ui/core';\n\nexport default makeStyles((theme) => ({\n    paper: {\n        marginTop: theme.spacing(8),\n        display: 'flex',\n        flexDirection: 'column',\n        alignItems: 'center',\n    },\n    avatar: {\n        margin: theme.spacing(1),\n        backgroundColor: theme.palette.secondary.main,\n    },\n    form: {\n        width: '100%', // Fix IE 11 issue.\n        marginTop: theme.spacing(1),\n    },\n    submit: {\n        margin: theme.spacing(3, 0, 2),\n    },\n}));\n","function validateEmail(value) {\n    let error;\n    if (!value) {\n        error = 'Required';\n    } else if (!/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i.test(value)) {\n        error = 'Invalid email address';\n    }\n    return error;\n}\n\nfunction validatePassword(value) {\n    let error;\n    if (!value) {\n        error = 'Required';\n    } else if (!/^([a-zA-Z0-9@*#-]{8,15})$/.test(value)) {\n        error = `Your pasword must contain at least:\\n \n        -1 uppercase letter. \\n\n        -1 lowercase letter. \\n\n        -1 number. \\n\n        -1 special character. \\n\n        And must be at leat 8 characters long.`;\n    }\n    return error;\n}\n\nfunction validateConfirm(pass, value) {\n    let error;\n    if (!value) {\n        error = 'Required';\n    } else if (pass && value && value !== pass) {\n        error = 'Password confirmation does not match your password';\n    }\n    return error;\n}\n\nfunction isRequired(value) {\n    let error;\n    if (!value) {\n        error = 'Required';\n    }\n    return error;\n}\n\nexport { validateEmail, validatePassword, validateConfirm, isRequired };\n","import React from 'react';\nimport { Alert } from '@material-ui/lab';\nimport IMessage from 'interfaces/message-interface';\n\nconst AlertMessage: React.FC<IMessage> = ({ status, text }: IMessage) => {\n    return (\n        <>\n            <Alert severity={status}>\n                <p>{text}</p>\n            </Alert>\n        </>\n    );\n};\n\nexport default AlertMessage;\n","import React, { useState } from 'react';\nimport { Formik, FormikHelpers, Field } from 'formik';\nimport { withRouter, RouteComponentProps } from 'react-router-dom';\nimport {\n    Avatar,\n    Button,\n    CssBaseline,\n    TextField,\n    FormControlLabel,\n    Checkbox,\n    Link,\n    Grid,\n    Typography,\n    Container,\n} from '@material-ui/core';\nimport LockOutlinedIcon from '@material-ui/icons/LockOutlined';\nimport useStyles from './styles';\nimport { validateEmail, validatePassword, validateConfirm } from 'utils/validations';\nimport AlertMessage from 'components/alert-message';\nimport IMessage from 'interfaces/message-interface';\nimport firebase from 'firebase-config';\n\ninterface IValues {\n    name: string;\n    email: string;\n    password: string;\n    confirm: string;\n}\n\ninterface ILoginProps extends RouteComponentProps<any> {}\n\nconst LoginPage: React.FC<ILoginProps> = (props: ILoginProps) => {\n    const [message, setMessage] = useState<IMessage | undefined>();\n    const [signIn, setSignIn] = useState(true);\n    const classes = useStyles();\n\n    const handleSubmit = async (values: IValues, signIn: boolean) => {\n        try {\n            if (signIn) {\n                await firebase.login(values.email, values.password);\n                props.history.push('/chat');\n            } else {\n                await firebase.register(values.name, values.email, values.password);\n                props.history.push('/chat');\n            }\n        } catch (error) {\n            setMessage({ status: 'error', text: error.message });\n        }\n    };\n\n    return (\n        <Container component=\"main\" maxWidth=\"xs\">\n            <CssBaseline />\n            <div className={classes.paper}>\n                <Avatar className={classes.avatar}>\n                    <LockOutlinedIcon />\n                </Avatar>\n                <Typography component=\"h1\" variant=\"h5\">\n                    {signIn ? 'Sign in' : 'Sign Up'}\n                </Typography>\n                {message && <AlertMessage status={message.status} text={message.text} />}\n                <Formik\n                    validateOnBlur\n                    initialValues={{ name: '', email: '', password: '', confirm: '' }}\n                    onSubmit={(values: IValues, { setSubmitting }: FormikHelpers<IValues>) => {\n                        handleSubmit(values, signIn);\n                        setSubmitting(false);\n                    }}\n                >\n                    {({\n                        values,\n                        errors,\n                        touched,\n                        handleChange,\n                        handleBlur,\n                        handleSubmit,\n                        isSubmitting,\n                    }) => (\n                        <form onSubmit={handleSubmit}>\n                            {!signIn && (\n                                <TextField\n                                    variant=\"outlined\"\n                                    margin=\"normal\"\n                                    fullWidth\n                                    name=\"name\"\n                                    label=\"Name\"\n                                    id=\"name\"\n                                    onChange={handleChange}\n                                    onBlur={handleBlur}\n                                    value={values.name}\n                                />\n                            )}\n                            <Field\n                                name=\"email\"\n                                value={values.email}\n                                validate={validateEmail}\n                                render={() => (\n                                    <TextField\n                                        variant=\"outlined\"\n                                        margin=\"normal\"\n                                        fullWidth\n                                        id=\"email\"\n                                        label=\"Email Address\"\n                                        type=\"email\"\n                                        autoComplete=\"email\"\n                                        onChange={handleChange}\n                                        onBlur={handleBlur}\n                                        name=\"email\"\n                                    />\n                                )}\n                            />\n\n                            {errors.email && touched.email && (\n                                <AlertMessage status=\"error\" text={errors.email} />\n                            )}\n                            <Field\n                                name=\"password\"\n                                value={values.password}\n                                validate={validatePassword}\n                                render={() => (\n                                    <TextField\n                                        id=\"password\"\n                                        name=\"password\"\n                                        variant=\"outlined\"\n                                        margin=\"normal\"\n                                        fullWidth\n                                        autoComplete=\"current-password\"\n                                        type=\"password\"\n                                        label=\"Password\"\n                                        onChange={handleChange}\n                                        onBlur={handleBlur}\n                                    />\n                                )}\n                            />\n                            {errors.password && touched.password && (\n                                <AlertMessage status=\"error\" text={errors.password} />\n                            )}\n                            {!signIn && (\n                                <>\n                                    <Field\n                                        name=\"confirm\"\n                                        value={values.confirm}\n                                        validate={(value) =>\n                                            validateConfirm(values.password, value)\n                                        }\n                                        render={() => (\n                                            <TextField\n                                                variant=\"outlined\"\n                                                margin=\"normal\"\n                                                fullWidth\n                                                name=\"confirm\"\n                                                label=\"Confirm password\"\n                                                id=\"confirm\"\n                                                type=\"password\"\n                                                onChange={handleChange}\n                                                onBlur={handleBlur}\n                                            />\n                                        )}\n                                    />\n                                    {touched.confirm && errors.confirm && (\n                                        <AlertMessage status=\"error\" text={errors.confirm} />\n                                    )}\n                                </>\n                            )}\n                            {signIn && (\n                                <FormControlLabel\n                                    control={<Checkbox value=\"remember\" color=\"primary\" />}\n                                    label=\"Remember me\"\n                                />\n                            )}\n                            <Button\n                                type=\"submit\"\n                                fullWidth\n                                variant=\"contained\"\n                                color=\"primary\"\n                                className={classes.submit}\n                                disabled={isSubmitting}\n                            >\n                                {signIn ? 'Sign In' : 'Sign Up'}\n                            </Button>\n                            <Grid container>\n                                <Grid item xs>\n                                    <Link href=\"#\" variant=\"body2\">\n                                        Forgot password?\n                                    </Link>\n                                </Grid>\n                                <Grid item>\n                                    <Link\n                                        href=\"#\"\n                                        variant=\"body2\"\n                                        onClick={() => setSignIn(!signIn)}\n                                    >\n                                        {signIn\n                                            ? \"Don't have an account? Sign Up\"\n                                            : 'Already have an account? Sign In'}\n                                    </Link>\n                                </Grid>\n                            </Grid>\n                        </form>\n                    )}\n                </Formik>\n            </div>\n        </Container>\n    );\n};\n\nexport default withRouter(LoginPage);\n","import { makeStyles } from '@material-ui/core';\n\nconst drawerWidth = 300;\n\nexport default makeStyles((theme) => ({\n    toolbar: {\n        paddingRight: 24, // keep right padding when drawer closed\n    },\n    appBar: {\n        zIndex: theme.zIndex.drawer + 1,\n        transition: theme.transitions.create(['width', 'margin'], {\n            easing: theme.transitions.easing.sharp,\n            duration: theme.transitions.duration.leavingScreen,\n        }),\n    },\n    appBarShift: {\n        marginLeft: drawerWidth,\n        width: `calc(100% - ${drawerWidth}px)`,\n        transition: theme.transitions.create(['width', 'margin'], {\n            easing: theme.transitions.easing.sharp,\n            duration: theme.transitions.duration.enteringScreen,\n        }),\n    },\n    menuButton: {\n        marginRight: 36,\n    },\n    menuButtonHidden: {\n        display: 'none',\n    },\n    title: {\n        flex: 1,\n    },\n    iconsWrapper: {\n        flex: 1,\n        display: 'flex',\n        alignItems: 'center',\n        justifyContent: 'flex-end',\n    },\n}));\n","import React, { useEffect, useState } from 'react';\nimport clsx from 'clsx';\nimport { AppBar, Toolbar, Typography, IconButton, Badge } from '@material-ui/core';\nimport { withRouter, RouteComponentProps } from 'react-router-dom';\nimport {\n    Menu as MenuIcon,\n    Notifications as NotificationsIcon,\n    ExitToApp as ExitIcon,\n    Person as PersonIcon,\n    ChevronLeft as ChevronLeftIcon,\n} from '@material-ui/icons';\nimport firebase from 'firebase-config';\nimport { Store } from 'store';\n\nimport useStyles from './styles';\nimport { ChatUserActions } from 'store/chat-user-state';\n\nexport interface ITopBarProps extends RouteComponentProps<any> {\n    handleDrawerOpen: () => void;\n    handleDrawerClose: () => void;\n    open: boolean;\n}\n\nconst TopBar: React.FC<ITopBarProps> = (props: ITopBarProps) => {\n    const classes = useStyles();\n    const { state, dispatch } = React.useContext(Store);\n    const [newMessages, setNewMessages] = useState<number>(0);\n    const currentUserId = state.currentUser?.uid;\n    useEffect(() => {\n        if (state.userChats.length > 0) {\n            const newMsgs = state.userChats.filter((chat) => !chat.read).length;\n            setNewMessages(newMsgs);\n        }\n    }, [state.userChats, currentUserId]);\n\n    const handleLogOut = async () => {\n        await firebase.logout();\n        props.history.replace('/');\n    };\n\n    const handleGoToProfile = () => {\n        ChatUserActions.resetChatMessages(dispatch);\n        props.history.push('/profile');\n    };\n\n    return (\n        <AppBar\n            position=\"absolute\"\n            className={clsx(classes.appBar, props.open && classes.appBarShift)}\n        >\n            <Toolbar className={classes.toolbar}>\n                <IconButton\n                    edge=\"start\"\n                    color=\"inherit\"\n                    aria-label=\"open drawer\"\n                    onClick={props.handleDrawerOpen}\n                    className={clsx(classes.menuButton, props.open && classes.menuButtonHidden)}\n                >\n                    <MenuIcon />\n                </IconButton>\n                <IconButton\n                    onClick={props.handleDrawerClose}\n                    className={clsx(classes.menuButton, !props.open && classes.menuButtonHidden)}\n                >\n                    <ChevronLeftIcon />\n                </IconButton>\n                <Typography component=\"span\" variant=\"h5\" color=\"inherit\" className={classes.title}>\n                    {state.usersWithChats[0]?.displayName || state.usersWithChats[0]?.email}\n                </Typography>\n\n                <div className={classes.iconsWrapper}>\n                    <Typography component=\"span\">{`Hello ${\n                        state.currentUser?.displayName || state.currentUser?.email\n                    }!`}</Typography>\n                    <IconButton color=\"inherit\" onClick={handleGoToProfile}>\n                        <PersonIcon fontSize=\"large\" />\n                    </IconButton>\n                    {newMessages > 0 && (\n                        <IconButton color=\"inherit\">\n                            <Badge badgeContent={newMessages} color=\"secondary\">\n                                <NotificationsIcon fontSize=\"large\" />\n                            </Badge>\n                        </IconButton>\n                    )}\n                    <IconButton\n                        color=\"inherit\"\n                        onClick={(e) => {\n                            e.preventDefault();\n                            handleLogOut();\n                        }}\n                    >\n                        <ExitIcon fontSize=\"large\" />\n                    </IconButton>\n                </div>\n            </Toolbar>\n        </AppBar>\n    );\n};\n\nexport default withRouter(TopBar);\n","import { makeStyles } from '@material-ui/core';\n\nexport default makeStyles((theme) => ({\n    active: {\n        backgroundColor: theme.palette.grey[700],\n    },\n    closed: {\n        paddingLeft: '0 !important',\n    },\n    orange: {\n        backgroundColor: 'orange',\n    },\n    small: {\n        width: theme.spacing(5),\n        height: theme.spacing(5),\n    },\n}));\n","import React, { useContext, EventHandler, useState, useEffect } from 'react';\nimport { ListItem, Avatar, Box, ListItemText, Badge, IconButton } from '@material-ui/core';\nimport { ChatUserActions } from 'store/chat-user-state';\nimport DeleteIcon from '@material-ui/icons/Delete';\nimport IUser from 'interfaces/user-interface';\nimport { Store } from 'store';\nimport useStyles from './styles';\nimport clsx from 'clsx';\n\ninterface IUserItemProps {\n    user: IUser;\n    currentUser: IUser;\n    activeChat?: boolean;\n    index?: number;\n    open: boolean;\n}\nconst UserItem: React.FC<IUserItemProps> = ({\n    user,\n    currentUser,\n    activeChat,\n    index,\n    open,\n}: IUserItemProps): JSX.Element => {\n    const classes = useStyles();\n    const { state, dispatch } = useContext(Store);\n    const [newMessages, setNewMessages] = useState<number | undefined>();\n\n    useEffect(() => {\n        if (user) {\n            const chatUserMessages = state.userChats.filter((chat) => chat.user === user.uid);\n            const newMsgs = chatUserMessages.filter((msg) => msg.read === false).length;\n            setNewMessages(newMsgs);\n        }\n    }, [state.userChats, currentUser.uid, user]);\n\n    const handleOnSelectUser: EventHandler<React.SyntheticEvent<Event | any>> = (e): void => {\n        e.stopPropagation();\n        if (\n            state.usersWithChats.length > 0 &&\n            !state.chatUsers.some((user) => user === state.usersWithChats[0].uid)\n        ) {\n            ChatUserActions.removeFromUsersWithChats(\n                currentUser.uid,\n                state.usersWithChats[0].uid,\n                dispatch,\n            );\n        }\n        ChatUserActions.resetChatMessages(dispatch);\n        ChatUserActions.setChatAsRead(currentUser.uid, user.uid);\n        const timer = setTimeout(() => {\n            ChatUserActions.getCurrentChat(currentUser.uid, user.uid, dispatch);\n            ChatUserActions.setChatUser(currentUser, user);\n            clearTimeout(timer);\n        }, 200);\n    };\n\n    const handleOnDeleteChat: EventHandler<React.SyntheticEvent<Event | any>> = (e): void => {\n        e.stopPropagation();\n        ChatUserActions.deleteChat(currentUser, user, dispatch);\n        ChatUserActions.resetChatMessages(dispatch);\n    };\n\n    return (\n        <ListItem\n            key={user.uid}\n            button\n            onClick={handleOnSelectUser}\n            className={clsx(index === 0 ? classes.active : '', !open ? classes.closed : '')}\n        >\n            <Box mr={2}>\n                {user?.photoURL ? (\n                    <IconButton color=\"inherit\">\n                        <Badge badgeContent={newMessages} color=\"secondary\">\n                            <Avatar\n                                alt={user?.displayName || user?.email || undefined}\n                                src={user?.photoURL || undefined}\n                                className={classes.small}\n                            />\n                        </Badge>\n                    </IconButton>\n                ) : (\n                    <IconButton color=\"inherit\">\n                        <Badge badgeContent={newMessages} color=\"secondary\">\n                            <Avatar className={clsx(classes.orange, classes.small)}>\n                                {user?.displayName?.slice(0, 2)}\n                            </Avatar>\n                        </Badge>\n                    </IconButton>\n                )}\n            </Box>\n            {open && (\n                <>\n                    <ListItemText primary={user.displayName || user.email} />\n                    {activeChat && <DeleteIcon onClick={handleOnDeleteChat} />}\n                </>\n            )}\n        </ListItem>\n    );\n};\n\nexport default UserItem;\n","import { makeStyles, fade } from '@material-ui/core';\n\nconst drawerWidth = 300;\n\nexport default makeStyles((theme) => ({\n    drawerPaper: {\n        position: 'relative',\n        whiteSpace: 'nowrap',\n        width: drawerWidth,\n        transition: theme.transitions.create('width', {\n            easing: theme.transitions.easing.sharp,\n            duration: theme.transitions.duration.enteringScreen,\n        }),\n    },\n    drawerPaperClose: {\n        position: 'relative',\n        overflowX: 'hidden',\n        transition: theme.transitions.create('width', {\n            easing: theme.transitions.easing.sharp,\n            duration: theme.transitions.duration.leavingScreen,\n        }),\n        width: theme.spacing(7),\n        [theme.breakpoints.up('sm')]: {\n            width: theme.spacing(9),\n        },\n    },\n    search: {\n        position: 'relative',\n        borderRadius: theme.shape.borderRadius,\n        marginRight: theme.spacing(3),\n        marginTop: theme.spacing(2),\n        marginBottom: theme.spacing(2),\n        backgroundColor: fade(theme.palette.common.white, 0.15),\n        '&:hover': {\n            backgroundColor: fade(theme.palette.common.white, 0.25),\n        },\n        width: '100%',\n        [theme.breakpoints.up('sm')]: {\n            marginLeft: theme.spacing(3),\n            width: 'auto',\n        },\n    },\n    searchIcon: {\n        padding: theme.spacing(0, 2),\n        height: '100%',\n        position: 'absolute',\n        pointerEvents: 'none',\n        display: 'flex',\n        alignItems: 'center',\n        justifyContent: 'center',\n    },\n    inputRoot: {\n        color: 'inherit',\n    },\n    inputInput: {\n        padding: theme.spacing(1, 1, 1, 0),\n        // vertical padding + font size from searchIcon\n        paddingLeft: `calc(1em + ${theme.spacing(4)}px)`,\n        transition: theme.transitions.create('width'),\n        width: '100%',\n        [theme.breakpoints.up('md')]: {\n            width: '20ch',\n        },\n    },\n    usersList: {\n        padding: 0,\n    },\n}));\n","import React, { useEffect, useState } from 'react';\nimport clsx from 'clsx';\nimport { Drawer, Divider, InputBase, List } from '@material-ui/core';\nimport { Search as SearchIcon } from '@material-ui/icons';\nimport UserItem from './components/users-list';\nimport { UsersActions } from 'store/users-state';\nimport { Store } from 'store';\n\nimport useStyles from './styles';\n\ninterface IDrawerProps {\n    open: boolean;\n}\n\nexport default function App({ open }: IDrawerProps) {\n    const classes = useStyles();\n    const { state, dispatch } = React.useContext(Store);\n    const [search, setSearch] = useState<string>('');\n\n    useEffect(() => {\n        UsersActions.getAllUsers(dispatch);\n    }, [dispatch]);\n\n    const handleChangeSearch = (\n        e: React.ChangeEvent<HTMLInputElement | HTMLTextAreaElement>,\n    ): void => {\n        const searchWord = e.target.value.toLowerCase();\n        setSearch(searchWord);\n    };\n\n    return (\n        <Drawer\n            variant=\"permanent\"\n            classes={{\n                paper: clsx(classes.drawerPaper, !open && classes.drawerPaperClose),\n            }}\n            open={open}\n        >\n            <div className={classes.search}>\n                <div className={classes.searchIcon}>\n                    <SearchIcon />\n                </div>\n                <InputBase\n                    placeholder=\"Search…\"\n                    classes={{\n                        root: classes.inputRoot,\n                        input: classes.inputInput,\n                    }}\n                    inputProps={{ 'aria-label': 'search' }}\n                    onChange={handleChangeSearch}\n                />\n            </div>\n            <Divider />\n            {state.users && state.currentUser && (\n                <>\n                    {state.usersWithChats.length > 0 && (\n                        <>\n                            <List\n                                component=\"nav\"\n                                aria-label=\"secondary mailbox folders\"\n                                className={classes.usersList}\n                            >\n                                {state.usersWithChats\n                                    .filter((user) =>\n                                        user.displayName.toLowerCase().includes(search),\n                                    )\n                                    .map((user, idx) => (\n                                        <UserItem\n                                            key={user.uid}\n                                            user={user}\n                                            currentUser={state.currentUser}\n                                            activeChat\n                                            index={idx}\n                                            open={open}\n                                        />\n                                    ))}\n                            </List>\n                            <Divider />\n                        </>\n                    )}\n                    <List\n                        component=\"nav\"\n                        aria-label=\"secondary mailbox folders\"\n                        className={classes.usersList}\n                    >\n                        {state.users\n                            .filter(\n                                (user) =>\n                                    user.uid !== state.currentUser.uid &&\n                                    !state.usersWithChats.some((u) => u.uid === user.uid),\n                            )\n                            .map((user) => (\n                                <UserItem\n                                    key={user.uid}\n                                    user={user}\n                                    currentUser={state.currentUser}\n                                    open={open}\n                                />\n                            ))}\n                    </List>\n                </>\n            )}\n        </Drawer>\n    );\n}\n","import { makeStyles } from '@material-ui/core';\n\nexport default makeStyles((theme) => ({\n    chatInput: {\n        padding: theme.spacing(2),\n        flex: 1,\n    },\n    formControl: {\n        display: 'flex',\n        flexDirection: 'row',\n    },\n    inputField: {\n        flexGrow: 1,\n        marginRight: theme.spacing(2),\n    },\n    submit: {\n        flex: 1,\n        width: 60,\n        height: 60,\n        maxWidth: 60,\n        borderRadius: '50%',\n    },\n}));\n","import React, { useContext } from 'react';\nimport { TextField, FormControl, Button } from '@material-ui/core';\nimport { Formik, Field } from 'formik';\nimport { isRequired } from 'utils/validations';\nimport { ChatUserActions } from 'store/chat-user-state';\nimport { Store } from 'store';\n\nimport useStyles from './styles';\n\ninterface IValues {\n    text: string;\n}\n\nconst InputField: React.FC = (): React.ReactElement => {\n    const { state } = useContext(Store);\n    const classes = useStyles();\n\n    const handleSendMessage = (values) => {\n        ChatUserActions.sendMessage({\n            senderId: state.currentUser.uid,\n            receiverId: state.usersWithChats[0].uid,\n            text: values.text,\n            read: false,\n        });\n    };\n\n    return (\n        <>\n            <Formik\n                validateOnBlur\n                initialValues={{ text: '' }}\n                onSubmit={(values: IValues, { resetForm }) => {\n                    handleSendMessage(values);\n                    resetForm({});\n                }}\n            >\n                {({ handleSubmit, handleChange, values, handleBlur, resetForm }) => (\n                    <form onSubmit={handleSubmit}>\n                        <FormControl fullWidth className={classes.formControl}>\n                            <Field\n                                touched\n                                validate={isRequired}\n                                name=\"text\"\n                                render={() => (\n                                    <TextField\n                                        value={values.text || ''}\n                                        name=\"text\"\n                                        id=\"outlined-basic\"\n                                        label=\"Write your message\"\n                                        variant=\"outlined\"\n                                        multiline\n                                        rowsMax={2}\n                                        onBlur={handleBlur}\n                                        onChange={handleChange}\n                                        className={classes.inputField}\n                                        onKeyDown={(e: React.KeyboardEvent<any | Event>) => {\n                                            if (e.key === 'Enter') {\n                                                handleSendMessage(values);\n                                            }\n                                        }}\n                                        onKeyUp={(e: React.KeyboardEvent<any | Event>) => {\n                                            if (e.key === 'Enter') {\n                                                resetForm({});\n                                            }\n                                        }}\n                                    />\n                                )}\n                            />\n                            <Button\n                                type=\"submit\"\n                                variant=\"contained\"\n                                color=\"secondary\"\n                                className={classes.submit}\n                                disabled={values.text === ''}\n                            >\n                                Send\n                            </Button>\n                        </FormControl>\n                    </form>\n                )}\n            </Formik>\n        </>\n    );\n};\n\nexport default InputField;\n","import * as React from 'react';\nimport { Button } from '@material-ui/core';\n\ninterface IButtonListProps {\n    handleDelete: (event: React.MouseEvent<HTMLButtonElement>) => void;\n}\n\nconst ButtonList: React.FunctionComponent<IButtonListProps> = ({\n    handleDelete,\n}: IButtonListProps) => (\n    <Button variant=\"contained\" color=\"secondary\" fullWidth onClick={handleDelete}>\n        Delete message\n    </Button>\n);\n\nexport default ButtonList;\n","import { makeStyles } from '@material-ui/core';\n\nexport default makeStyles((theme) => ({\n    root: {\n        display: 'flex',\n        maxHeight: '100vh',\n    },\n    appBarSpacer: theme.mixins.toolbar,\n    content: {\n        flexGrow: 1,\n        height: '100vh',\n        overflow: 'auto',\n    },\n    container: {\n        display: 'flex',\n        flexDirection: 'column',\n        height: 'calc(100% - 64px)',\n    },\n    chatContainer: {\n        flexGrow: 1,\n        borderBottom: `1px solid ${theme.palette.grey[700]}`,\n        overflowY: 'auto',\n    },\n    messageGrid: {\n        cursor: 'pointer',\n        '&:hover': {\n            backgroundColor: theme.palette.grey[800],\n        },\n        padding: theme.spacing(1),\n    },\n    receivedMessagePaper: {\n        backgroundColor: '#9fa8da',\n        maxWidth: '60%',\n        padding: theme.spacing(1),\n        float: 'left',\n    },\n    sentMessagePaper: {\n        backgroundColor: '#7986cb',\n        maxWidth: '60%',\n        padding: theme.spacing(1),\n        float: 'right',\n    },\n    chatInput: {\n        padding: theme.spacing(2),\n        flex: 1,\n    },\n    formControl: {\n        display: 'flex',\n        flexDirection: 'row',\n    },\n    inputField: {\n        flexGrow: 1,\n        marginRight: theme.spacing(2),\n    },\n    submit: {\n        flex: 1,\n        width: 60,\n        height: 60,\n        maxWidth: 60,\n        borderRadius: '50%',\n    },\n}));\n","import { makeStyles, Theme, createStyles } from '@material-ui/core';\n\nexport default makeStyles((theme: Theme) =>\n    createStyles({\n        paper: {\n            position: 'absolute',\n            width: 400,\n            padding: theme.spacing(2),\n            backgroundColor: theme.palette.background.paper,\n            justifyContent: 'center',\n            alignItems: 'center',\n            top: '50%',\n            left: '50%',\n            transform: 'translate(-50%, -50%)',\n            outline: 'none',\n        },\n    }),\n);\n","import React, { ReactChildren, ReactChild } from 'react';\nimport useStyles from './styles';\nimport Modal from '@material-ui/core/Modal';\n\ninterface IModalProps {\n    openModal: boolean;\n    children: ReactChildren | ReactChild;\n    handleClose: (event: React.MouseEvent<HTMLButtonElement>) => void;\n}\n\nconst ModalWrapper: React.FC<IModalProps> = ({\n    children,\n    openModal,\n    handleClose,\n}: IModalProps): JSX.Element => {\n    const classes = useStyles();\n\n    return (\n        <Modal\n            open={openModal}\n            onClose={handleClose}\n            aria-labelledby=\"simple-modal-title\"\n            aria-describedby=\"simple-modal-description\"\n        >\n            <div className={classes.paper}>{children}</div>\n        </Modal>\n    );\n};\n\nexport default ModalWrapper;\n","import React, { useState, useEffect, useContext } from 'react';\nimport { CssBaseline, Container, Grid, Paper } from '@material-ui/core';\nimport TopBar from './components/top-bar';\nimport Drawer from './components/drawer';\nimport InputField from './components/input-field';\nimport { ChatUserActions } from 'store/chat-user-state';\nimport { Store } from 'store';\nimport ButtonList from './components/button-list';\nimport useStyles from './styles';\nimport { UsersActions } from 'store/users-state';\nimport ModalWrapper from 'components/modal-wrapper';\nimport IChat from 'interfaces/chat-interface';\n\nconst ChatPage: React.FC = () => {\n    const { state, dispatch } = useContext(Store);\n    const classes = useStyles();\n    const [modalOpen, setModalOpen] = useState<boolean>(false);\n    const [open, setOpen] = useState<boolean>(true);\n    const [messageWriter, setMessageWriter] = useState<string | undefined>();\n    const [messageSelected, setMessageSelected] = useState<IChat | undefined>();\n    const currentUser = state.currentUser || null;\n    const handleDrawer = () => {\n        setOpen(!open);\n    };\n\n    const handleClose = () => {\n        setModalOpen(false);\n    };\n\n    const handleOnClick = () => {\n        ChatUserActions.setChatAsRead(state.currentUser.uid, state.usersWithChats[0]?.uid);\n    };\n\n    const handleDeleteMessage = () => {\n        if (messageSelected && messageWriter) {\n            ChatUserActions.deleteMessage(messageSelected, messageWriter, dispatch);\n        }\n        setModalOpen(false);\n    };\n\n    useEffect(() => {\n        if (currentUser == null) {\n            UsersActions.getCurrentUser(dispatch);\n        }\n    }, [dispatch, currentUser]);\n\n    useEffect(() => {\n        if (state.currentUser?.uid) {\n            ChatUserActions.getInitialChatUser(state.currentUser, dispatch);\n            UsersActions.getChatUsers(state.currentUser?.uid, dispatch);\n            ChatUserActions.getUsersWithChats(state.currentUser.uid, dispatch);\n        }\n        // eslint-disable-next-line\n    }, [currentUser?.uid, state.currentUser]);\n\n    useEffect(() => {\n        if (state.usersWithChats.length > 0 && state.messages.length === 0) {\n            ChatUserActions.getCurrentChat(\n                state.currentUser.uid,\n                state.usersWithChats[0].uid,\n                dispatch,\n            );\n            ChatUserActions.setChatAsRead(state.currentUser.uid, state.usersWithChats[0].uid);\n        }\n        // eslint-disable-next-line\n    }, [state.usersWithChats[0]?.uid]);\n\n    return (\n        <>\n            <div className={classes.root}>\n                <CssBaseline />\n                <TopBar\n                    handleDrawerOpen={handleDrawer}\n                    handleDrawerClose={handleDrawer}\n                    open={open}\n                />\n                <Drawer open={open} />\n                <main className={classes.content}>\n                    <div className={classes.appBarSpacer} />\n                    <Container maxWidth=\"lg\" className={classes.container} disableGutters>\n                        <Grid\n                            item\n                            xs={12}\n                            className={classes.chatContainer}\n                            onClick={handleOnClick}\n                        >\n                            {state.usersWithChats?.length > 0 &&\n                                state.messages\n                                    .filter(\n                                        (msg) =>\n                                            msg.receiverId === state.usersWithChats[0].uid ||\n                                            msg.senderId === state.usersWithChats[0].uid,\n                                    )\n                                    .map((message) =>\n                                        message.receiverId === state.currentUser.uid ? (\n                                            <Grid\n                                                className={classes.messageGrid}\n                                                container\n                                                key={message.chatId}\n                                                onClick={() => {\n                                                    setModalOpen(true);\n                                                    setMessageSelected(message);\n                                                    setMessageWriter('receiver');\n                                                }}\n                                            >\n                                                <Paper className={classes.receivedMessagePaper}>\n                                                    {message.text}\n                                                </Paper>\n                                            </Grid>\n                                        ) : (\n                                            <Grid\n                                                className={classes.messageGrid}\n                                                container\n                                                justify=\"flex-end\"\n                                                key={message.chatId}\n                                                onClick={() => {\n                                                    setModalOpen(true);\n                                                    setMessageSelected(message);\n                                                    setMessageWriter('sender');\n                                                }}\n                                            >\n                                                <Paper className={classes.sentMessagePaper}>\n                                                    {message.text}\n                                                </Paper>\n                                            </Grid>\n                                        ),\n                                    )}\n                        </Grid>\n                        <Grid item xs={12} className={classes.chatInput}>\n                            <InputField />\n                        </Grid>\n                    </Container>\n                </main>\n            </div>\n            <ModalWrapper\n                openModal={modalOpen}\n                handleClose={handleClose}\n                children={<ButtonList handleDelete={handleDeleteMessage} />}\n            />\n        </>\n    );\n};\n\nexport default ChatPage;\n","import { makeStyles } from '@material-ui/core';\n\nexport default makeStyles((theme) => ({\n    layout: {\n        display: 'flex',\n        flexDirection: 'column',\n        alignItems: 'center',\n        paddingTop: theme.spacing(2),\n        justifyContent: 'center',\n        width: 'auto',\n        marginLeft: theme.spacing(2),\n        marginRight: theme.spacing(2),\n        [theme.breakpoints.up(600 + theme.spacing(2) * 2)]: {\n            width: 600,\n            marginLeft: 'auto',\n            marginRight: 'auto',\n        },\n    },\n    paper: {\n        marginTop: theme.spacing(1),\n        marginBottom: theme.spacing(3),\n        width: 500,\n        padding: theme.spacing(2),\n        [theme.breakpoints.up(600 + theme.spacing(3) * 2)]: {\n            marginTop: theme.spacing(6),\n            marginBottom: theme.spacing(6),\n            padding: theme.spacing(3),\n        },\n        display: 'flex',\n    },\n    appBar: {\n        position: 'relative',\n    },\n    title: {\n        flexGrow: 1,\n    },\n    btnsWrapper: {\n        marginTop: 0,\n    },\n    avatarWrapper: {\n        position: 'relative',\n        cursor: 'pointer',\n    },\n    editIcon: {\n        position: 'absolute',\n        top: 0,\n        right: -10,\n        zIndex: 3,\n        cursor: 'pointer',\n    },\n    fileInput: {\n        display: 'none',\n    },\n    orange: {\n        backgroundColor: 'orange',\n    },\n    large: {\n        width: theme.spacing(10),\n        height: theme.spacing(10),\n    },\n}));\n","import React, { useState, ChangeEvent } from 'react';\nimport clsx from 'clsx';\nimport { RouteComponentProps, withRouter } from 'react-router-dom';\nimport IUser from 'interfaces/user-interface';\nimport {\n    Paper,\n    Typography,\n    Button,\n    Grid,\n    CssBaseline,\n    AppBar,\n    Toolbar,\n    Avatar,\n    TextField,\n} from '@material-ui/core';\nimport { ExitToApp, Edit as EditIcon } from '@material-ui/icons';\nimport firebase from 'firebase-config';\nimport AlertMessage from 'components/alert-message';\nimport useStyles from './styles';\n\ninterface IProfileProps extends RouteComponentProps<any> {}\n\nconst ProfilePage: React.FC<IProfileProps> = (props: IProfileProps) => {\n    const classes = useStyles();\n    const [name, setName] = useState<string | undefined>();\n    const [message, setMessage] = useState<any>();\n    const [file, setFile] = useState<File | undefined>();\n    const [imagePreview, setImagePreview] = useState<string | undefined>();\n    const [user, setUser] = useState<IUser | null | undefined>(firebase.getCurrentUser());\n\n    const handleSubmit = async () => {\n        const response = await firebase.updateUserProfile(file, name);\n        if (response?.status === 'success') {\n            setUser(firebase.getCurrentUser());\n        }\n        setMessage(response);\n        const timer = setTimeout(() => {\n            setMessage(null);\n            clearTimeout(timer);\n        }, 3000);\n    };\n\n    const uploadFile = (e: ChangeEvent<HTMLInputElement>): void => {\n        e.preventDefault();\n        if (e.target.files) {\n            const url = URL.createObjectURL(e.target.files[0]);\n            setFile(e.target.files[0]);\n            setImagePreview(url);\n        }\n    };\n\n    return (\n        <React.Fragment>\n            <CssBaseline />\n\n            <AppBar position=\"absolute\" color=\"default\" className={classes.appBar}>\n                <Toolbar>\n                    <Typography variant=\"h5\" color=\"inherit\" noWrap className={classes.title}>\n                        Profile\n                    </Typography>\n                    <Button startIcon={<ExitToApp />} onClick={() => props.history.goBack()}>\n                        Go Back\n                    </Button>\n                </Toolbar>\n            </AppBar>\n\n            <main className={classes.layout}>\n                {message && <AlertMessage status={message.status} text={message.text} />}\n                <Paper className={classes.paper}>\n                    <Grid container alignItems=\"center\" direction=\"column\" spacing={2}>\n                        <Grid item>\n                            {user && (\n                                <div className={classes.avatarWrapper}>\n                                    <input\n                                        id=\"raised-button-file\"\n                                        type=\"file\"\n                                        accept=\"image/.jpg,.png,.jpeg\"\n                                        className={classes.fileInput}\n                                        onChange={uploadFile}\n                                    />\n                                    <label htmlFor=\"raised-button-file\">\n                                        <EditIcon\n                                            color=\"primary\"\n                                            fontSize=\"large\"\n                                            className={classes.editIcon}\n                                        />\n                                    </label>\n                                    {imagePreview || user.photoURL ? (\n                                        <Avatar\n                                            alt={user?.displayName || user?.email || undefined}\n                                            src={imagePreview || user.photoURL || undefined}\n                                            className={classes.large}\n                                        />\n                                    ) : (\n                                        <Avatar className={clsx(classes.orange, classes.large)}>\n                                            {user?.displayName?.slice(0, 2)}\n                                        </Avatar>\n                                    )}\n                                </div>\n                            )}\n                        </Grid>\n                        <Grid item xs={12}>\n                            <TextField\n                                id=\"outlined-basic\"\n                                label=\"Name\"\n                                variant=\"outlined\"\n                                defaultValue={user?.displayName}\n                                fullWidth\n                                margin=\"normal\"\n                                onChange={(e) => setName(e.target.value)}\n                            />\n                            <TextField\n                                id=\"outlined-basic\"\n                                label=\"Email\"\n                                variant=\"outlined\"\n                                defaultValue={user?.email}\n                                fullWidth\n                                margin=\"normal\"\n                                disabled\n                            />\n                            <Grid\n                                container\n                                justify=\"flex-end\"\n                                spacing={2}\n                                alignItems=\"center\"\n                                className={classes.btnsWrapper}\n                            >\n                                <Grid item>\n                                    <Button\n                                        variant=\"contained\"\n                                        color=\"primary\"\n                                        onClick={(e) => {\n                                            e.preventDefault();\n                                            handleSubmit();\n                                        }}\n                                        disabled={\n                                            (name == null || name === '') && imagePreview == null\n                                        }\n                                    >\n                                        Update\n                                    </Button>\n                                </Grid>\n                                <Grid item>\n                                    <Button\n                                        variant=\"contained\"\n                                        color=\"secondary\"\n                                        onClick={() => props.history.goBack()}\n                                    >\n                                        Cancel\n                                    </Button>\n                                </Grid>\n                            </Grid>\n                        </Grid>\n                    </Grid>\n                </Paper>\n            </main>\n        </React.Fragment>\n    );\n};\n\nexport default withRouter(ProfilePage);\n","import React, { useEffect, useState } from 'react';\nimport { Switch, Route } from 'react-router-dom';\nimport LoginPage from './views/login-page';\nimport ChatPage from './views/chat-page';\nimport ProfilePage from './views/profile-page';\nimport { createMuiTheme, ThemeProvider } from '@material-ui/core/styles';\nimport { CircularProgress } from '@material-ui/core';\nimport { PaletteOptions, Palette } from '@material-ui/core/styles/createPalette';\nimport firebase from 'firebase-config';\n\ndeclare module '@material-ui/core/styles/createMuiTheme' {\n    interface Theme {\n        palette: Palette;\n    }\n    interface ThemeOptions {\n        palette?: PaletteOptions;\n    }\n}\n\nconst theme = createMuiTheme({\n    palette: {\n        type: 'dark',\n    },\n});\n\nconst App: React.FunctionComponent = (): JSX.Element => {\n    const [firebaseInitialized, setFirebaseInitialized] = useState(false);\n\n    useEffect(() => {\n        firebase.isInitialized().then((res: any) => {\n            setFirebaseInitialized(res);\n        });\n    }, []);\n    return firebaseInitialized !== false ? (\n        <ThemeProvider theme={theme}>\n            <Switch>\n                <Route exact path=\"/\" component={LoginPage} />\n                <Route path=\"/chat\" component={ChatPage} />\n                <Route path=\"/profile\" component={ProfilePage} />\n            </Switch>\n        </ThemeProvider>\n    ) : (\n        <CircularProgress />\n    );\n};\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { BrowserRouter as Router } from 'react-router-dom';\nimport './index.css';\nimport { StoreProvider } from './store';\nimport App from './App';\n\nReactDOM.render(\n    <React.StrictMode>\n        <Router basename={window.location.pathname || ''}>\n            <StoreProvider>\n                <App />\n            </StoreProvider>\n        </Router>\n    </React.StrictMode>,\n    document.getElementById('root'),\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\n"],"sourceRoot":""}